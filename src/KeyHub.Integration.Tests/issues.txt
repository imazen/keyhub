
What algorithm should be used for signing the licenses?  (using SHA256Managed since it is in .NET 2.0)
	I believe this is not actually very significant.  If we use a weak hash, I believe the only 
	risk created is that there are other documents that would have the same hash that could 
	validated by the signature-- but such documents would be highly unlikely to be formatted like
	a license.  I believe using a weaker hash would not risk the private key being shared, that 
	is protected by how RSA applies the private key to the hash.  I am using SHA256Managed for 
	now since it is available as far back as .NET 2.0.


How to repro 50 character email problem?
  -> local accounts seem to work ok with long email.  
  Maybe OpenID has issues?  Hard to test:
	  Google max name size is 30.
	  I have a long MSN account, but microsoft OpenID isn't working  (need appsettings to configure that OpenID provider)


Do the integration tests work on other people's machines ok?
  (warning: They will delete your localhost keyhub database)
  (They do require stopping IISExpress if its already debugging)
  ->  PhantomJS was't installed.  After being installed, it was't on the path.
  ->  It may assume that IISEXpress has had a chance to create a config entry for KeyHub in the user's applicationhost.config



Do we strongly couple the users email with username?



Poor messaging when registering an existing user account
   -> we should have a link to /Account/LinkAccount somewhere

If the user has invalid cookies, they might get forced to error screen 
  (to repro, login locally then delete local database.  This creates a cookie for a non-existant account)

  
have test username/password in source control (a test gmail account)

  
merge columns User.Email and User.Username into User.Email


resharper test runner stalls if I try to run MSTest tests (it used to work, hmm.  Tests do pass when using VS test runner)