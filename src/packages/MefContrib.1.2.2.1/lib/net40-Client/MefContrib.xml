<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MefContrib</name>
    </assembly>
    <members>
        <member name="T:MefContrib.Hosting.RecursiveDirectoryCatalog">
            <summary>
            Extends <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog"/> to support discovery of parts in sub-directories.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.RecursiveDirectoryCatalog.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.RecursiveDirectoryCatalog"/> class with <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> objects based on all the DLL files in the specified directory path and its sub-directories.
            </summary>
            <param name="path">Path to the directory to scan for assemblies to add to the catalog.</param>
        </member>
        <member name="M:MefContrib.Hosting.RecursiveDirectoryCatalog.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.RecursiveDirectoryCatalog"/> class with <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> objects based on the specified search pattern in the specified directory path path and its sub-directories.
            </summary>
            <param name="path">Path to the directory to scan for assemblies to add to the catalog.</param>
            <param name="searchPattern">The pattern to search with. The format of the pattern should be the same as specified for GetFiles.</param>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="path"/> parameter was <see langword="null"/>.</exception>
        </member>
        <member name="P:MefContrib.Hosting.RecursiveDirectoryCatalog.Parts">
            <summary>
            Gets the part definitions that are contained in the recursive directory catalog. (Overrides ComposablePartCatalog.Parts.)
            </summary>
        </member>
        <member name="E:MefContrib.Hosting.RecursiveDirectoryCatalog.Changed">
            <summary>
            Occurs when the contents of the catalog has changed.
            </summary>
        </member>
        <member name="E:MefContrib.Hosting.RecursiveDirectoryCatalog.Changing">
            <summary>
            Occurs when the catalog is changing.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.RecursiveDirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName">
            <summary>
            Gets the display name of the directory catalog.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.RecursiveDirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin">
            <summary>
            Gets the composition element from which the directory catalog originated.
            </summary>
        </member>
        <member name="T:MefContrib.ContractServices">
            <summary>
            Contains the methods used to retrive contract name and type identity for imports and exports.
            </summary>
            <remarks>
            The contract name and type identities produced by this class are compatible with those that are 
            used by the Attributed Programming Model that ships with the Managed Extensibility Framework.
            </remarks>
        </member>
        <member name="M:MefContrib.ContractServices.GetExportContractName(System.String,System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets the export contract name based on the provided hints.
            </summary>
            <param name="contractName">A <see cref="T:System.String"/> containing the name of the contract to use for the export.</param>
            <param name="contractType">The <see cref="T:System.Type"/> of the contract to use for the export.</param>
            <param name="member">A <see cref="T:System.Reflection.MemberInfo"/> instance for the member that is being exported.</param>
            <returns>A <see cref="T:System.String"/> containing the contract name.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="member"/> parameter was <see langword="null"/>.</exception>
        </member>
        <member name="M:MefContrib.ContractServices.GetExportTypeIdentity(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets export type identity based on the provided hints.
            </summary>
            <param name="contractType">The <see cref="T:System.Type"/> of the type identity to use for the export.</param>
            <param name="member">A <see cref="T:System.Reflection.MemberInfo"/> instance for the member that is being exported.</param>
            <returns>A <see cref="T:System.String"/> containing the type identity.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="member"/> parameter was <see langword="null"/>.</exception>
        </member>
        <member name="M:MefContrib.ContractServices.GetImportContractName(System.String,System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets the import contract name based on the provided hints.
            </summary>
            <param name="contractName">A <see cref="T:System.String"/> containing the name of the contract to use for the import.</param>
            <param name="contractType">The <see cref="T:System.Type"/> of the contract to use for the import.</param>
            <param name="member">A <see cref="T:System.Reflection.MemberInfo"/> instance for the member that is being imported.</param>
            <returns>A <see cref="T:System.String"/> containing the contract name.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="member"/> parameter was <see langword="null"/>.</exception>
        </member>
        <member name="M:MefContrib.ContractServices.GetImportTypeIdentity(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets import type identity based on the provided hints.
            </summary>
            <param name="contractType">The <see cref="T:System.Type"/> of the type identity to use for the import.</param>
            <param name="member">A <see cref="T:System.Reflection.MemberInfo"/> instance for the member that is being imported.</param>
            <returns>A <see cref="T:System.String"/> containing the type identity.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="member"/> parameter was <see langword="null"/>.</exception>
        </member>
        <member name="M:MefContrib.ContractServices.GetImportDefinitionType(System.ComponentModel.Composition.Primitives.ImportDefinition)">
            <summary>
            Gets the <see cref="T:System.Type"/> of the given <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/>.
            </summary>
            <param name="definition">The <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> instance.</param>
            <returns>A <see cref="T:System.Type"/> of the requested import.</returns>
            <remarks>Works only for reflection model import definitions.</remarks>
        </member>
        <member name="M:MefContrib.ContractServices.IsReflectionImportDefinition(System.ComponentModel.Composition.Primitives.ImportDefinition)">
            <summary>
            Checks if the given <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> is based on reflection model.
            </summary>
            <param name="definition">The <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> instance.</param>
            <returns><c>True</c> if the given import definition is based on the
            reflection model. <c>False</c> otherwise.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.AggregatedTypeScanner">
            <summary>
            A type scanner that contains a collection of <see cref="T:MefContrib.Hosting.Conventions.ITypeScanner"/> instances that are
            queries for types when the <see cref="M:MefContrib.Hosting.Conventions.AggregatedTypeScanner.GetTypes(System.Predicate{System.Type})"/> method is invoked.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.ITypeScanner">
            <summary>
            Defines the functionality of a class that stores types retreived from functions.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ITypeScanner.GetTypes(System.Predicate{System.Type})">
            <summary>
            Retreives a collection of <see cref="T:System.Type"/> instances that matched the provided <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A <see cref="T:System.Predicate`1"/> used to match the types to return.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the matched types.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.AggregatedTypeScanner.#ctor(MefContrib.Hosting.Conventions.ITypeScanner[])">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.AggregatedTypeScanner"/> class.
            </summary>
            <param name="scanners">An array of <see cref="T:MefContrib.Hosting.Conventions.ITypeScanner"/> instances, that should be queried by the type scanner.</param>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.AggregatedTypeScanner.#ctor(System.Collections.Generic.IEnumerable{MefContrib.Hosting.Conventions.ITypeScanner})">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.AggregatedTypeScanner"/> class.
            </summary>
            <param name="scanners">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:MefContrib.Hosting.Conventions.ITypeScanner"/> instances, that should be queried by the type scanner.</param>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.AggregatedTypeScanner.Add(MefContrib.Hosting.Conventions.ITypeScanner)">
            <summary>
            Adds an <see cref="T:MefContrib.Hosting.Conventions.ITypeScanner"/> instance to the aggregate scanner.
            </summary>
            <param name="scanner">The <see cref="T:MefContrib.Hosting.Conventions.ITypeScanner"/> instance to add to the aggregate scanner.</param>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="scanner"/> parameter cannot be <see langword="null"/>.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.AggregatedTypeScanner.GetTypes(System.Predicate{System.Type})">
            <summary>
            Retreives a collection of <see cref="T:System.Type"/> instances that matched the provided <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A <see cref="T:System.Predicate`1"/> used to match the types to return.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the matched types.</returns>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.AggregatedTypeScanner.Scanners">
            <summary>
            Gets or sets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:MefContrib.Hosting.Conventions.ITypeScanner"/> instances that are queried by the scanner.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:MefContrib.Hosting.Conventions.ITypeScanner"/> instances that are queried by the scanner.</value>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.AppDomainPartRegistryLocator">
            <summary>
            Locates <see cref="T:MefContrib.Hosting.Conventions.Configuration.IPartRegistry`1"/> instances in the domain. For each located registry, a
            <see cref="T:MefContrib.Hosting.Conventions.PartRegistryLocator"/> is created and invoked.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.IPartRegistryLocator">
            <summary>
            Defines the functionality available by a partregistry locator
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.IPartRegistryLocator.GetRegistries">
            <summary>
            Locates <see cref="T:MefContrib.Hosting.Conventions.Configuration.IPartRegistry`1"/> instances.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:MefContrib.Hosting.Conventions.Configuration.IPartRegistry`1"/> instances.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.AppDomainPartRegistryLocator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.AppDomainPartRegistryLocator"/> class,
            for the current <see cref="T:System.AppDomain"/>.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.AppDomainPartRegistryLocator.#ctor(System.AppDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.AppDomainPartRegistryLocator"/> class.
            </summary>
            <param name="domain">The <see cref="T:System.AppDomain"/> for which the locator should be initialized.</param>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.AppDomainPartRegistryLocator.GetRegistries">
            <summary>
            Locates <see cref="T:MefContrib.Hosting.Conventions.Configuration.IPartRegistry`1"/> instances in the domain.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:MefContrib.Hosting.Conventions.Configuration.IPartRegistry`1"/> instances.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.AssemblyTypeScanner">
            <summary>
            Scans an <see cref="P:MefContrib.Hosting.Conventions.AssemblyTypeScanner.Assembly"/> for types that matches a provided predicate.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.AssemblyTypeScanner.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.AssemblyTypeScanner"/> class.
            </summary>
            <param name="assembly">The <see cref="P:MefContrib.Hosting.Conventions.AssemblyTypeScanner.Assembly"/> instance that the scanner should use when looking for types that matches a predicate.</param>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.AssemblyTypeScanner.GetTypes(System.Predicate{System.Type})">
            <summary>
            Retreives a collection of <see cref="T:System.Type"/> instances that matched the provided <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A <see cref="T:System.Predicate`1"/> used to match the types to return.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the matched types.</returns>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.AssemblyTypeScanner.Assembly">
            <summary>
            Gets the <see cref="P:MefContrib.Hosting.Conventions.AssemblyTypeScanner.Assembly"/> instance that the <see cref="T:MefContrib.Hosting.Conventions.AssemblyTypeScanner"/> uses.
            </summary>
            <value>The <see cref="P:MefContrib.Hosting.Conventions.AssemblyTypeScanner.Assembly"/> instance that the <see cref="T:MefContrib.Hosting.Conventions.AssemblyTypeScanner"/> uses.</value>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.ConfigurationPartRegistry">
            <summary>
            Represents a parts registry which uses <see cref="T:MefContrib.Hosting.Conventions.Configuration.Section.ConventionConfigurationSection"/> to provide parts.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.IPartRegistry`1">
            <summary>
            Defines the functionality of a convention registry for conventions implementing the <see cref="T:MefContrib.Hosting.Conventions.IPartConvention"/> interface.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.IConventionRegistry`1">
            <summary>
            Defines the functionality provided by the convention registry.
            </summary>
            <typeparam name="TConventionInterface">The type of the convention that the registry can handle.</typeparam>
        </member>
        <member name="T:MefContrib.IHideObjectMembers">
            <summary>
            Helper interface used to hide the base <see cref="T:System.Object"/>  members from the fluent API to make it much cleaner 
            in Visual Studio intellisense.
            </summary>
            <remarks>Created by Daniel Cazzulino http://www.clariusconsulting.net/blogs/kzu/archive/2008/03/10/58301.aspx</remarks>
        </member>
        <member name="M:MefContrib.IHideObjectMembers.Equals(System.Object)">
            <summary>
            Hides the <see cref="M:MefContrib.IHideObjectMembers.Equals(System.Object)"/> method.
            </summary>
        </member>
        <member name="M:MefContrib.IHideObjectMembers.GetHashCode">
            <summary>
            Hides the <see cref="M:MefContrib.IHideObjectMembers.GetHashCode"/> method.
            </summary>
        </member>
        <member name="M:MefContrib.IHideObjectMembers.GetType">
            <summary>
            Hides the <see cref="M:MefContrib.IHideObjectMembers.GetType"/> method.
            </summary>
        </member>
        <member name="M:MefContrib.IHideObjectMembers.ToString">
            <summary>
            Hides the <see cref="M:MefContrib.IHideObjectMembers.ToString"/> method.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.IConventionRegistry`1.GetConventions">
            <summary>
            Gets the conventions registered in the registry.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing convention of the type specified by the <typeparamref name="TConventionInterface"/> type parameter.</returns>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.IPartRegistry`1.ContractService">
            <summary>
            Gets or sets the contract service used by the registry.
            </summary>
            <value>An <see cref="T:MefContrib.Hosting.Conventions.IContractService"/> instance.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.IPartRegistry`1.TypeScanner">
            <summary>
            Gets the type scanner used to create parts out of the conventions in the registry.
            </summary>
            <value>An <see cref="T:MefContrib.Hosting.Conventions.ITypeScanner"/> instance.</value>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ConfigurationPartRegistry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.Configuration.ConfigurationPartRegistry"/> class.
            </summary>
            <param name="configurationSectionName">Name of the section defined in the App.config file.</param>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ConfigurationPartRegistry.#ctor(MefContrib.Hosting.Conventions.Configuration.Section.ConventionConfigurationSection)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.Configuration.ConfigurationPartRegistry"/> class.
            </summary>
            <param name="section">An <see cref="T:MefContrib.Hosting.Conventions.Configuration.Section.ConventionConfigurationSection"/> instance.</param>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ConfigurationPartRegistry.GetConventions">
            <summary>
            Gets the conventions registered in the registry.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.ConfigurationPartRegistry.ConfigurationSection">
            <summary>
            Gets <see cref="T:MefContrib.Hosting.Conventions.Configuration.Section.ConventionConfigurationSection"/> instance.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.ConfigurationPartRegistry.ContractService">
            <summary>
            Gets or sets the contract service used by the registry.
            </summary>
            <value>An <see cref="T:MefContrib.Hosting.Conventions.IContractService"/> instance.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.ConfigurationPartRegistry.TypeScanner">
            <summary>
            Gets the type scanner used to create parts out of the conventions in the registry.
            </summary>
            <value>An <see cref="T:MefContrib.Hosting.Conventions.ITypeScanner"/> instance.</value>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.ExpressionBuilder`1">
            <summary>
            Abstract expression builder.
            </summary>
            <typeparam name="T">Type of the object to be built.</typeparam>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.IExpressionBuilder">
            <summary>
            Represents the expression builder.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.IExpressionBuilder.Build">
            <summary>
            Builds the specific instance and assigns values using expressions.
            </summary>
            <returns>Initialized instance of an object.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExpressionBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExpressionBuilder`1"/> class.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExpressionBuilder`1.Build">
            <summary>
            Builds the specific instance and assigns values using expressions.
            </summary>
            <returns>Initialized instance of an object.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExpressionBuilder`1.ProvideValueFor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Assigns given value to a property given by the expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="value">Value to be assigned to a property represented by the <paramref name="expression"/>.</param>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.IConventionBuilder`1">
            <summary>
            Defines functionality that is shared between all convention builders.
            </summary>
            <typeparam name="TConvention">The <see cref="T:System.Type"/> of the convention that should be built by the convention builder.</typeparam>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.IConventionBuilder`1.GetConvention">
            <summary>
            Gets the convention instance built by the convention builder.
            </summary>
            <returns>An instance of the convention type that the convention builder can build.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ConventionBuilder`1.GetConvention">
            <summary>
            Gets the convention instance built by the convention builder.
            </summary>
            <returns>An instance of the convention type that the convention builder can build.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1">
            <summary>
            A convention builder for <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/> instances.
            </summary>
            <typeparam name="TExportConvention">The type of the export convention that will be built by the expression builder.</typeparam>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1"/> class.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1.AddMetadata(System.Object)">
            <summary>
            Defines metadata, using property name and values extracted from an anonymous type, that will be added to the exports created by the convention.
            </summary>
            <param name="anonymousType">The anonymous type that the names and values will be extracted from.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1"/> instance as the method was called on.</returns>
            <exception cref="T:System.ArgumentNullException">The method was called with a null value.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1.AddMetadata(System.String,System.Object)">
            <summary>
            Defines metadata, using a name and value pair, that will be added to the exports created by the convention.
            </summary>
            <param name="name">The name of the metadata.</param>
            <param name="value">The value of the metadata.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1"/> instance as the method was called on.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="name"/> or <paramref name="value"/> parameters were null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The lenght of the <paramref name="name"/> was zero.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1.AddMetadata(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object}[]})">
            <summary>
            Defines metadata, using <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instances retrieved from a function, that will be added to the exports created by the convention.
            </summary>
            <param name="metadataFunction">The function that the metadata can be retrieved from.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1"/> instance as the method was called on.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="metadataFunction"/>, or the value returned by it, was null.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1.ContractName(System.String)">
            <summary>
            Defines the contract name that will be added to the exports created by the convention.
            </summary>
            <param name="contractName">A <see cref="T:System.String"/> containing the name of the contract which should be used by the created exports.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1"/> instance as the method was called on.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1.ContractName``1">
            <summary>
            Defines the contract name that will be added to the exports created by the convention, by deriving it from the provided type.
            </summary>
            <typeparam name="TContractType">A <see cref="T:System.Type"/> that should be used as the contract name of the created exports.</typeparam>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1"/> instance as the method was called on.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1.ContractName(System.Func{System.Reflection.MemberInfo,System.String})">
            <summary>
            Defined the contract name that will be added to the exports created by the convention, by invoking the function.
            </summary>
            <param name="contractNameFunction">A function that accepts a <see cref="T:System.Reflection.MemberInfo"/> instance for the member that is being exported and returns the contract name.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1"/> instance as the method was called on.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1.ContractType``1">
            <summary>
            Defines the contract type that will be added to the exports created by the convention.
            </summary>
            <typeparam name="TContractType">A <see cref="T:System.Type"/> that should be used as the contract type of the created exports.</typeparam>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1"/> instance as the method was called on.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1.ContractType(System.Func{System.Reflection.MemberInfo,System.Type})">
            <summary>
            Defined the contract type that will be added to the exports created by the convention, by invoking the function.
            </summary>
            <param name="contractTypeFunction">A function that accepts a <see cref="T:System.Reflection.MemberInfo"/> instance for the member that is being exported and returns the contract type.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1"/> instance as the method was called on.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1.Members(System.Func{System.Type,System.Reflection.MemberInfo[]})">
            <summary>
            Defines the members which should be used as exports by retreiving them from a function.
            </summary>
            <param name="expression">A <see cref="T:System.Func`2"/> function that returns a collection of <see cref="T:System.Reflection.MemberInfo"/> instances based on the provided <see cref="T:System.Type"/>.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1"/> instance as the method was called on.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="expression"/> parameter was null.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1.Member``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Defines the members which sould be used as exports by extracting them from a lambda expression with no return value.
            </summary>
            <typeparam name="TPart">The <see cref="T:System.Type"/> that the members should be extracted from.</typeparam>
            <param name="expression">An expression that idenfies the members which should be used as exports.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1"/> instance as the method was called on.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="expression"/> parameter was null.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1.Member``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Defines the members which sould be used as exports by extracting them from a lambda expression with a return value.
            </summary>
            <typeparam name="TPart">The <see cref="T:System.Type"/> that the members should be extracted from.</typeparam>
            <param name="expression">An expression that idenfies the members which should be used as exports.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1"/> instance as the method was called on.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="expression"/> parameter was null.</exception>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilderExtensions">
            <summary>
            Defines a set of useful <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1"/> extensions.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`2">
            <summary>
            A convention builder for <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/> instances.
            </summary>
            <typeparam name="TExportConvention">The type of the export convention that will be built by the expression builder.</typeparam>
            <typeparam name="TPart">The type of the part this export is applied to.</typeparam>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.ExportRegistry">
            <summary>
            A convention registry for types implementing the <see cref="T:MefContrib.Hosting.Conventions.IPartConvention"/> interface.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.ExpressionBuilderFactory`1">
            <summary>
            Provides the ability to register conventions. The convention instances will not be created until they are
            retrieved from the registry.
            </summary>
            <typeparam name="TConvention">The type of the convention that the registry can handle.</typeparam>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExpressionBuilderFactory`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExpressionBuilderFactory`1"/> class.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExpressionBuilderFactory`1.BuildConventions">
            <summary>
            Builds the conventions defines in the expression builders.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing convention of the type specified by the<typeparamref name="TConvention"/> type parameter.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExpressionBuilderFactory`1.CreateExpressionBuilder``1">
            <summary>
            Creates and tracks a new expression builder of the type specified by the <typeparamref name="TBuilder"/> type parameter.
            </summary>
            <typeparam name="TBuilder">The type of the expression builder which should be created.</typeparam>
            <returns>A <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExpressionBuilder`1"/> instance of the type specified by the <typeparamref name="TBuilder"/> type parameter.</returns>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.ExpressionBuilderFactory`1.ExpressionBuilders">
            <summary>
            Gets or sets the convention builders.
            </summary>
            <value>A <see cref="T:System.Collections.Generic.IList`1"/> instance, containing the convention builders.</value>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.IExportRegistry">
            <summary>
            Defines the functionality of a convention registry for conventions implementing the <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/> interface.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.IExportRegistry.Export">
            <summary>
            Creates a convention builde for <see cref="T:MefContrib.Hosting.Conventions.ExportConvention"/> conventions.
            </summary>
            <returns>A <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1"/> instance for the <see cref="T:MefContrib.Hosting.Conventions.ExportConvention"/> type.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.IExportRegistry.Export``1">
            <summary>
            Creates a convention builde for <see cref="T:MefContrib.Hosting.Conventions.ExportConvention"/> conventions.
            </summary>
            <returns>A <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`2"/> instance for the <see cref="T:MefContrib.Hosting.Conventions.ExportConvention"/> type.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.IExportRegistry.ExportWithConvention``1">
            <summary>
            Create a convention builder for the <typeparamref name="TConvention"/> convention type.
            </summary>
            <typeparam name="TConvention">The type of a class which implements the <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/> interface.</typeparam>
            <returns>A <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1"/> instance for the export convention type specified by the <typeparamref name="TConvention"/> type parameter.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExportRegistry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExportRegistry"/> class.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExportRegistry.GetConventions">
            <summary>
            Gets the conventions registered in the registry.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/> instances.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExportRegistry.Export">
            <summary>
            Creates a convention builder for <see cref="T:MefContrib.Hosting.Conventions.ExportConvention"/> conventions.
            </summary>
            <returns>A <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1"/> instance for the <see cref="T:MefContrib.Hosting.Conventions.ExportConvention"/> type.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExportRegistry.Export``1">
            <summary>
            Creates a convention builder for <see cref="T:MefContrib.Hosting.Conventions.ExportConvention"/> conventions.
            </summary>
            <returns>A <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1"/> instance for the <see cref="T:MefContrib.Hosting.Conventions.ExportConvention"/> type.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ExportRegistry.ExportWithConvention``1">
            <summary>
            Create a convention builder for the <typeparamref name="TConvention"/> convention type.
            </summary>
            <typeparam name="TConvention">The type of a class which implements the <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/> interface.</typeparam>
            <returns>A <see cref="T:MefContrib.Hosting.Conventions.Configuration.ExportConventionBuilder`1"/> instance for the export convention type specified by the <typeparamref name="TConvention"/> type parameter.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.IImportRegistry">
            <summary>
            Defines the functionality of a convention registry for conventions implementing the <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/> interface.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.IImportRegistry.Import">
            <summary>
            Creates a convention builde for <see cref="T:MefContrib.Hosting.Conventions.ImportConvention"/> conventions.
            </summary>
            <returns>A <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> instance for the <see cref="T:MefContrib.Hosting.Conventions.ImportConvention"/> type.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.IImportRegistry.Import``1">
            <summary>
            Creates a convention builde for <see cref="T:MefContrib.Hosting.Conventions.ImportConvention"/> conventions.
            </summary>
            <returns>A <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`2"/> instance for the <see cref="T:MefContrib.Hosting.Conventions.ImportConvention"/> type.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.IImportRegistry.ImportWithConvention``1">
            <summary>
            Create a convention builder for the <typeparamref name="TConvention"/> convention type.
            </summary>
            <typeparam name="TConvention">The type of a class which implements the <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/> interface.</typeparam>
            <returns>A <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> instance for the import convention type specified by the <typeparamref name="TConvention"/> type parameter.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1">
            <summary>
            A convention builder for <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/> instances.
            </summary>
            <typeparam name="TImportConvention">The type of the import convention that will be built by the expression builder.</typeparam>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> class.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1.AllowDefaultValue">
            <summary>
            Defines that the imports created by the convention allows default values if no matching exports could be found.
            </summary>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> instance as the method was called on.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1.ContractName(System.String)">
            <summary>
            Defines the contract name that will be added to the imports created by the convention.
            </summary>
            <param name="contractName">A <see cref="T:System.String"/> containing the name of the contract which should be used by the created imports.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> instance as the method was called on.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1.ContractName``1">
            <summary>
            Defines the contract name that will be added to the imports created by the convention, by deriving it from the provided type.
            </summary>
            <typeparam name="TContractType">A <see cref="T:System.Type"/> that should be used as the contract name of the created imports.</typeparam>
            <returns>Returns a reference to the same <see cref="!:IExportConventionBuilder&lt;TExportConvention&gt;"/> instance as the method was called on.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1.ContractName(System.Func{System.Reflection.MemberInfo,System.String})">
            <summary>
            Defined the contract name that will be added to the imports created by the convention, by invoking the function.
            </summary>
            <param name="contractNameFunction">A function that accepts a <see cref="T:System.Reflection.MemberInfo"/> instance for the member that is being imported and returns the contract name.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> instance as the method was called on.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1.ContractType``1">
            <summary>
            Defines the contract type that will be added to the imports created by the convention.
            </summary>
            <typeparam name="TContractType">A <see cref="T:System.Type"/> that should be used as the contract type of the created imports.</typeparam>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> instance as the method was called on.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1.ContractType(System.Func{System.Reflection.MemberInfo,System.Type})">
            <summary>
            Defined the contract type that will be added to the imports created by the convention, by invoking the function.
            </summary>
            <param name="contractTypeFunction">A function that accepts a <see cref="T:System.Reflection.MemberInfo"/> instance for the member that is being imported and returns the contract type.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> instance as the method was called on.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1.MakeNonShared">
            <summary>
            Defines that all imports created using the convention should be unique instances.
            </summary>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> instance as the method was called on.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1.MakeShared">
            <summary>
            Defines that all imports created using the convention should use a shared instance.
            </summary>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> instance as the method was called on.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1.Members(System.Func{System.Type,System.Reflection.MemberInfo[]})">
            <summary>
            Defines the members which should be used as imports by retreiving them from a function.
            </summary>
            <param name="expression">A <see cref="T:System.Func`2"/> function that returns a collection of <see cref="T:System.Reflection.MemberInfo"/> instances based on the provided <see cref="T:System.Type"/>.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> instance as the method was called on.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="expression"/> parameter was null.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1.Member``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Defines the members which sould be used as imports by extracting them from a lambda expression with no return value.
            </summary>
            <typeparam name="TPart">The <see cref="T:System.Type"/> that the members should be extracted from.</typeparam>
            <param name="expression">An expression that idenfies the members which should be used as imports.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> instance as the method was called on.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="expression"/> parameter was null.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1.Member``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Defines the members which sould be used as imports by extracting them from a lambda expression with a return value.
            </summary>
            <typeparam name="TPart">The <see cref="T:System.Type"/> that the members should be extracted from.</typeparam>
            <param name="expression">An expression that idenfies the members which should be used as imports.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> instance as the method was called on.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="expression"/> parameter was null.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1.Recomposable">
            <summary>
            Defines that the imports created by the convention allows recomposition.
            </summary>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> instance as the method was called on.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1.RequireMetadata``1(System.String)">
            <summary>
            Defines metadata that imports created by the convention needs to have satisfied, by using the provided name and type.
            </summary>
            <typeparam name="TMetadataType">The <see cref="T:System.Type"/> of the required metadata.</typeparam>
            <param name="name">A <see cref="T:System.String"/> containing the name of the required metadata.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> instance as the method was called on.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="name"/> parameter was null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The lenght of the <paramref name="name"/> parameter was zero.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1.RequireMetadata``1">
            <summary>
            Defines metadata that imports created by the convention needs to have satisfied, by extracting the property names and types from the provided type.
            </summary>
            <typeparam name="TMetadataView">The <see cref="T:System.Type"/> that the property names and values should be extracted from.</typeparam>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> instance as the method was called on.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilderExtensions">
            <summary>
            Defines a set of useful <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> extensions.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`2">
            <summary>
            A convention builder for <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/> instances.
            </summary>
            <typeparam name="TImportConvention">The type of the import convention that will be built by the expression builder.</typeparam>
            <typeparam name="TPart">The type of the part used to get imports for.</typeparam>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.ImportRegistry">
            <summary>
            A convention registry for types implementing the <see cref="T:MefContrib.Hosting.Conventions.IPartConvention"/> interface.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ImportRegistry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportRegistry"/> class.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ImportRegistry.GetConventions">
            <summary>
            Gets the conventions registered in the registry.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/> instances.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ImportRegistry.Import">
            <summary>
            Creates a convention builder for <see cref="T:MefContrib.Hosting.Conventions.ImportConvention"/> conventions.
            </summary>
            <returns>A <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> instance for the <see cref="T:MefContrib.Hosting.Conventions.ImportConvention"/> type.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ImportRegistry.Import``1">
            <summary>
            Creates a convention builde for <see cref="T:MefContrib.Hosting.Conventions.ImportConvention"/> conventions.
            </summary>
            <returns>A <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`2"/> instance for the <see cref="T:MefContrib.Hosting.Conventions.ImportConvention"/> type.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ImportRegistry.ImportWithConvention``1">
            <summary>
            Create a convention builder for the <typeparamref name="TConvention"/> convention type.
            </summary>
            <typeparam name="TConvention">The type of a class which implements the <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/> interface.</typeparam>
            <returns>A <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> instance for the import convention type specified by the <typeparamref name="TConvention"/> type parameter.</returns>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.ITypeDefaultConvention.ContractName">
            <summary>
            Gets or sets the name of the contract.
            </summary>
            <value>A <see cref="T:System.String"/> containing the name of the contract.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.ITypeDefaultConvention.ContractType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of the contract.
            </summary>
            <value>The <see cref="T:System.Type"/> of the contract.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.ITypeDefaultConvention.TargetType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> that the convention applies to.
            </summary>
            <value>The <see cref="T:System.Type"/> that the convention applies to.</value>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.ITypeDefaultConventionBuilder">
            <summary>
            Defines the functionality for a default value convention builder.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ITypeDefaultConventionBuilder.ContractName(System.String)">
            <summary>
            Defines the contract name that will be used as the default contract name for the configured type.
            </summary>
            <param name="contractName">A <see cref="T:System.String"/> containing the name of the contract which should be used as the default contract name for the configured type.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> instance as the method was called on.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ITypeDefaultConventionBuilder.ContractType``1">
            <summary>
            Defines the contract type that will be added to the imports created by the convention.
            </summary>
            <typeparam name="TContractType">A <see cref="T:System.Type"/> that should be used as the contract type of the created imports.</typeparam>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> instance as the method was called on.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.ITypeDefaultConventionConfigurator">
            <summary>
            Defines the functionality for configuring type default conventions.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ITypeDefaultConventionConfigurator.ForType``1">
            <summary>
            Creates a <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeDefaultConventionBuilder"/> instance for the <see cref="T:System.Type"/> specified by
            the <typeparamref name="T"/> type parameter.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> that the <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeDefaultConventionBuilder"/> should be created for.</typeparam>
            <returns>An <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeDefaultConventionBuilder"/> instance.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator">
            <summary>
            Defines the functionality of a type scanner configurator.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator.Assembly(System.Reflection.Assembly)">
            <summary>
            Adds the <see cref="M:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator.Assembly(System.Reflection.Assembly)"/> specified by the <paramref name="assembly"/> parameter.
            </summary>
            <param name="assembly">The <see cref="M:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator.Assembly(System.Reflection.Assembly)"/> that should be added.</param>
            <returns>A reference to the current <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator"/> instance.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator.Assembly(System.String)">
            <summary>
            Adds the <see cref="M:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator.Assembly(System.Reflection.Assembly)"/> specified by the <paramref name="path"/> parameter.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing the path to the <see cref="M:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator.Assembly(System.Reflection.Assembly)"/> that should be added.</param>
            <returns>A reference to the current <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator"/> instance.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator.Assembly(System.Func{System.Reflection.Assembly,System.Boolean})">
            <summary>
            Adds the <see cref="M:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator.Assembly(System.Reflection.Assembly)"/> in the current <see cref="T:System.AppDomain"/> that matches the
            condition specified by the <paramref name="condition"/> parameter.
            </summary>
            <param name="condition">A condition that an <see cref="M:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator.Assembly(System.Reflection.Assembly)"/> has to meet in order to be added.</param>
            <returns>A reference to the current <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator"/> instance.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator.Directory(System.String)">
            <summary>
            Adds the <see cref="M:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator.Assembly(System.Reflection.Assembly)"/> instances that can be found in the directory that is
            specified by the <paramref name="path"/> parameter.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing the path of the directory that should be inspected for <see cref="M:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator.Assembly(System.Reflection.Assembly)"/> instances to add.</param>
            <returns>A reference to the current <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator"/> instance.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator.Scanner(MefContrib.Hosting.Conventions.ITypeScanner)">
            <summary>
            Adds a scanner to the configurator.
            </summary>
            <param name="scanner">An <see cref="T:MefContrib.Hosting.Conventions.ITypeScanner"/> instance to add.</param>
            <returns>A reference to the current <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator"/> instance.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator.Types(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Adds the types specified by the <paramref name="types"/> parameter.
            </summary>
            <param name="types">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Type"/> instances that should be added.</param>
            <returns>A reference to the current <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator"/> instance.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator.Types(System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Adds the types that are returned by the function specified by the <paramref name="values"/> function.
            </summary>
            <param name="values">A function that returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Type"/> instances that should be added.</param>
            <returns>A reference to the current <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator"/> instance.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1">
            <summary>
            A convention builder for <see cref="T:MefContrib.Hosting.Conventions.IPartConvention"/> instances.
            </summary>
            <typeparam name="TConvention">The type of the part convention that will be built by the expression builder.</typeparam>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1"/> class.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1.AddMetadata(System.Object)">
            <summary>
            Defines metadata, using property name and values extracted from an anonymous type, that will be added to the parts created by the convention.
            </summary>
            <param name="anonymousType">The anonymous type that the names and values will be extracted from.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1"/> instance as the method was called on.</returns>
            <exception cref="T:System.ArgumentNullException">The method was called with a null value.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1.AddMetadata(System.String,System.Object)">
            <summary>
            Defines metadata, using a name and value pair, that will be added to the parts created by the convention.
            </summary>
            <param name="name">The name of the metadata.</param>
            <param name="value">The value of the metadata.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1"/> instance as the method was called on.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="name"/> or <paramref name="value"/> parameters were null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The lenght of the <paramref name="name"/> was zero.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1.AddMetadata(System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object}[]})">
            <summary>
            Defines metadata, using <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instances retrieved from a function, that will be added to the parts created by the convention.
            </summary>
            <param name="metadataFunction">The function that the metadata can be retrieved from.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1"/> instance as the method was called on.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="metadataFunction"/>, or the value returned by it, was null.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1.Exports(System.Action{MefContrib.Hosting.Conventions.Configuration.IExportRegistry})">
            <summary>
            Defines the export conventions which should be assigned to the part convention.
            </summary>
            <param name="action">A closure for an <see cref="T:MefContrib.Hosting.Conventions.Configuration.IExportRegistry"/> instance.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1"/> instance as the method was called on.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> parameter was null.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1.ForTypesMatching(System.Predicate{System.Type})">
            <summary>
            Defines the condition that a type has to pass in order for the convention to be applied to it.
            </summary>
            <param name="condition">A function that evaluates if the convention can be applied to the specified type.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1"/> instance as the method was called on.</returns>
            <exception cref="T:System.ArgumentNullException">The the <paramref name="condition"/> parameter was null.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1.Imports(System.Action{MefContrib.Hosting.Conventions.Configuration.IImportRegistry})">
            <summary>
            Defines the import conventions which should be assigned to the part convention.
            </summary>
            <param name="action">A closure for an <see cref="T:MefContrib.Hosting.Conventions.Configuration.IImportRegistry"/> instance.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1"/> instance as the method was called on.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> parameter was null.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1.MakeNonShared">
            <summary>
            Defines that all parts created using the convention should be unique instances.
            </summary>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1"/> instance as the method was called on.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1.MakeShared">
            <summary>
            Defines that all parts created using the convention should use a shared instance.
            </summary>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1"/> instance as the method was called on.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilderExtensions">
            <summary>
            Defines a set of useful <see cref="T:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1"/> extensions.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`2">
            <summary>
            A convention builder for <see cref="T:MefContrib.Hosting.Conventions.IPartConvention"/> instances.
            </summary>
            <typeparam name="TPart">The type of the part this convention is applied to.</typeparam>
            <typeparam name="TConvention">The type of the part convention that will be built by the expression builder.</typeparam>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`2.Exports(System.Action{MefContrib.Hosting.Conventions.Configuration.IExportRegistry})">
            <summary>
            Defines the export conventions which should be assigned to the part convention.
            </summary>
            <param name="action">A closure for an <see cref="T:MefContrib.Hosting.Conventions.Configuration.IExportRegistry"/> instance.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1"/> instance as the method was called on.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> parameter was null.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`2.Imports(System.Action{MefContrib.Hosting.Conventions.Configuration.IImportRegistry})">
            <summary>
            Defines the import conventions which should be assigned to the part convention.
            </summary>
            <param name="action">A closure for an <see cref="T:MefContrib.Hosting.Conventions.Configuration.IImportRegistry"/> instance.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1"/> instance as the method was called on.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> parameter was null.</exception>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.PartRegistry">
            <summary>
            A convention registry for types implementing the <see cref="T:MefContrib.Hosting.Conventions.IPartConvention"/> interface.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.PartRegistry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.Configuration.PartRegistry"/> class.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.PartRegistry.Scan(System.Action{MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator})">
            <summary>
            Scans the specified closure.
            </summary>
            <param name="closure">The closure.</param>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.PartRegistry.GetConventions">
            <summary>
            Gets the conventions registered in the registry.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing <see cref="T:MefContrib.Hosting.Conventions.IPartConvention"/> instances.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.PartRegistry.Part">
            <summary>
            Creates a convention builder for <see cref="T:MefContrib.Hosting.Conventions.PartConvention"/> conventions.
            </summary>
            <returns>A <see cref="T:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1"/> instance for the <see cref="T:MefContrib.Hosting.Conventions.PartConvention"/> type.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.PartRegistry.Part``1">
            <summary>
            Creates a convention builder for <see cref="T:MefContrib.Hosting.Conventions.PartConvention"/> conventions.
            </summary>
            <typeparam name="TPart">The type of the part this conventions is used for.</typeparam>
            <returns>A <see cref="T:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1"/> instance for the <see cref="T:MefContrib.Hosting.Conventions.PartConvention"/> type.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.PartRegistry.PartWithConvention``1">
            <summary>
            Create a convention builder for the <typeparamref name="TConvention"/> convention type.
            </summary>
            <typeparam name="TConvention">The type of a class which implements the <see cref="T:MefContrib.Hosting.Conventions.IPartConvention"/> interface.</typeparam>
            <returns>A <see cref="T:MefContrib.Hosting.Conventions.Configuration.PartConventionBuilder`1"/> instance for the part convention type specified by the <typeparamref name="TConvention"/> type parameter.</returns>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.PartRegistry.ContractService">
            <summary>
            Gets or sets the contract service used by the registry.
            </summary>
            <value>An <see cref="T:MefContrib.Hosting.Conventions.DefaultConventionContractService"/> instance.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.PartRegistry.TypeScanner">
            <summary>
            Gets or sets the type scanner used to create parts out of the conventions in the registry.
            </summary>
            <value>An <see cref="T:MefContrib.Hosting.Conventions.ITypeScanner"/> instance.</value>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.TypeDefaultConvention">
            <summary>
            Contains the default convention values for a <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.TypeDefaultConvention.ContractName">
            <summary>
            Gets or sets the name of the contract.
            </summary>
            <value>A <see cref="T:System.String"/> containing the name of the contract.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.TypeDefaultConvention.ContractType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of the contract.
            </summary>
            <value>The <see cref="T:System.Type"/> of the contract.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.TypeDefaultConvention.TargetType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> that the convention applies to.
            </summary>
            <value>The <see cref="T:System.Type"/> that the convention applies to.</value>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.TypeDefaultConventionBuilder">
            <summary>
            Provides the default implementation of a default convention value builder.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.TypeDefaultConventionBuilder.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.Configuration.TypeDefaultConventionBuilder"/> class.
            </summary>
            <param name="targetType">The <see cref="T:System.Type"/> that the default convention values are being defined for.</param>
            <exception cref="T:System.ArgumentNullException">The provided value for the <paramref name="targetType"/> parameter was <see langword="null"/></exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.TypeDefaultConventionBuilder.ContractName(System.String)">
            <summary>
            Defines the contract name that will be used as the default contract name for the configured type.
            </summary>
            <param name="contractName">A <see cref="T:System.String"/> containing the name of the contract which should be used as the default contract name for the configured type.</param>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> instance as the method was called on.</returns>
            <exception cref="T:System.ArgumentNullException">The provided value for the <paramref name="contractName"/> parameter was <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The length of the <paramref name="contractName"/> parameter was zero.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.TypeDefaultConventionBuilder.ContractType``1">
            <summary>
            Defines the contract type that will be added to the imports created by the convention.
            </summary>
            <typeparam name="TContractType">A <see cref="T:System.Type"/> that should be used as the contract type of the created imports.</typeparam>
            <returns>Returns a reference to the same <see cref="T:MefContrib.Hosting.Conventions.Configuration.ImportConventionBuilder`1"/> instance as the method was called on.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.TypeDefaultConventionConfigurator">
            <summary>
            Creates <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeDefaultConvention"/> instances.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.TypeDefaultConventionConfigurator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.Configuration.TypeDefaultConventionConfigurator"/> class.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.TypeDefaultConventionConfigurator.ForType``1">
            <summary>
            Creates a <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeDefaultConventionBuilder"/> instance for the <see cref="T:System.Type"/> specified by
            the <typeparamref name="T"/> type parameter.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> that the <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeDefaultConventionBuilder"/> should be created for.</typeparam>
            <returns>An <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeDefaultConventionBuilder"/> instance.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.TypeDefaultConventionConfigurator.GetDefaultConventions">
            <summary>
            Gets the <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeDefaultConvention"/> that was defined by the instance.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeDefaultConvention"/> instances.</returns>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.TypeDefaultConventionConfigurator.ConventionBuilders">
            <summary>
            Gets or sets the convention builders.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IList`1"/> instance, containing <see cref="T:MefContrib.Hosting.Conventions.Configuration.TypeDefaultConventionBuilder"/> instances.</value>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.TypeScannerConfigurator">
            <summary>
            Provides the functionality to fluently configure an <see cref="T:MefContrib.Hosting.Conventions.AggregatedTypeScanner"/> instance.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.TypeScannerConfigurator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.Configuration.TypeScannerConfigurator"/> class.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.TypeScannerConfigurator.Scanner(MefContrib.Hosting.Conventions.ITypeScanner)">
            <summary>
            Adds a scanner to the configurator.
            </summary>
            <param name="scanner">An <see cref="T:MefContrib.Hosting.Conventions.ITypeScanner"/> instance to add.</param>
            <returns>A reference to the current <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator"/> instance.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.TypeScannerConfigurator.Assembly(System.Reflection.Assembly)">
            <summary>
            Adds the <see cref="M:MefContrib.Hosting.Conventions.Configuration.TypeScannerConfigurator.Assembly(System.Reflection.Assembly)"/> specified by the <paramref name="assembly"/> parameter.
            </summary>
            <param name="assembly">The <see cref="M:MefContrib.Hosting.Conventions.Configuration.TypeScannerConfigurator.Assembly(System.Reflection.Assembly)"/> that should be added.</param>
            <returns>A reference to the current <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator"/> instance.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.TypeScannerConfigurator.Assembly(System.String)">
            <summary>
            Adds the <see cref="M:MefContrib.Hosting.Conventions.Configuration.TypeScannerConfigurator.Assembly(System.Reflection.Assembly)"/> specified by the <paramref name="path"/> parameter.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing the path to the <see cref="M:MefContrib.Hosting.Conventions.Configuration.TypeScannerConfigurator.Assembly(System.Reflection.Assembly)"/> that should be added.</param>
            <returns>A reference to the current <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator"/> instance.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.TypeScannerConfigurator.Assembly(System.Func{System.Reflection.Assembly,System.Boolean})">
            <summary>
            Adds the <see cref="M:MefContrib.Hosting.Conventions.Configuration.TypeScannerConfigurator.Assembly(System.Reflection.Assembly)"/> in the current <see cref="T:System.AppDomain"/> that matches the
            condition specified by the <paramref name="condition"/> parameter.
            </summary>
            <param name="condition">A condition that an <see cref="M:MefContrib.Hosting.Conventions.Configuration.TypeScannerConfigurator.Assembly(System.Reflection.Assembly)"/> has to meet in order to be added.</param>
            <returns>A reference to the current <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator"/> instance.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.TypeScannerConfigurator.Directory(System.String)">
            <summary>
            Adds the <see cref="M:MefContrib.Hosting.Conventions.Configuration.TypeScannerConfigurator.Assembly(System.Reflection.Assembly)"/> instances that can be found in the directory that is
            specified by the <paramref name="path"/> parameter.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing the path of the directory that should be inspected for <see cref="M:MefContrib.Hosting.Conventions.Configuration.TypeScannerConfigurator.Assembly(System.Reflection.Assembly)"/> instances to add.</param>
            <returns>A reference to the current <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator"/> instance.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.TypeScannerConfigurator.GetTypeScanner">
            <summary>
            Gets the <see cref="T:MefContrib.Hosting.Conventions.AggregatedTypeScanner"/> that was configured by the configurator.
            </summary>
            <returns>An <see cref="T:MefContrib.Hosting.Conventions.AggregatedTypeScanner"/> </returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.TypeScannerConfigurator.Types(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Adds the types specified by the <paramref name="types"/> parameter.
            </summary>
            <param name="types">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Type"/> instances that should be added.</param>
            <returns>A reference to the current <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator"/> instance.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.Configuration.TypeScannerConfigurator.Types(System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Adds the types that are returned by the function specified by the <paramref name="values"/> function.
            </summary>
            <param name="values">A function that returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Type"/> instances that should be added.</param>
            <returns>A reference to the current <see cref="T:MefContrib.Hosting.Conventions.Configuration.ITypeScannerConfigurator"/> instance.</returns>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.TypeScannerConfigurator.InternalTypeScanner">
            <summary>
            Gets or sets the <see cref="T:MefContrib.Hosting.Conventions.AggregatedTypeScanner"/> that is being configured.
            </summary>
            <value>An <see cref="T:MefContrib.Hosting.Conventions.AggregatedTypeScanner"/> instance.</value>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.ConventionCatalog">
            <summary>
            Defines the class for composable part catalogs, which produce and return <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> objects based on conventions.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ConventionCatalog.#ctor(MefContrib.Hosting.Conventions.IPartRegistryLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.ConventionCatalog"/> class.
            </summary>
            <param name="locator">The locator.</param>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ConventionCatalog.#ctor(MefContrib.Hosting.Conventions.Configuration.IPartRegistry{MefContrib.Hosting.Conventions.IContractService}[])">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.ConventionCatalog"/> class, using the provided array part registries.
            </summary>
            <param name="registries">An array of <see cref="T:MefContrib.Hosting.Conventions.Configuration.IPartRegistry`1"/> instance.</param>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ConventionCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
            <summary>
            Method which can filter exports for given <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> or produce new exports.
            </summary>
            <param name="definition"><see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> instance.</param>
            <returns>
            A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition"/>
            instances along with their <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances which match given <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/>.
            </returns>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.ConventionCatalog.Parts">
            <summary>
            Gets the part definitions of the catalog.
            </summary>
            <value>A <see cref="T:System.Linq.IQueryable`1"/> of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> objects of the <see cref="T:MefContrib.Hosting.Conventions.ConventionCatalog"/>.</value>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.ConventionContractService">
            <summary>
            Contains the methods used to retrive contract name and type identity for import and export conventions.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.IContractService">
            <summary>
            Defines the methods used to retrive contract name and type identity for imports and exports.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.IContractService.GetExportContractName(MefContrib.Hosting.Conventions.IExportConvention,System.Reflection.MemberInfo)">
            <summary>
            Gets contract name for the provided <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/>.
            </summary>
            <param name="exportConvention">The <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/> that the contract name should be retreived for.</param>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> that is being exported.</param>
            <returns>A <see cref="T:System.String"/> containing the contract name for the export.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.IContractService.GetExportTypeIdentity(MefContrib.Hosting.Conventions.IExportConvention,System.Reflection.MemberInfo)">
            <summary>
            Gets type identity for the provided <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/>.
            </summary>
            <param name="exportConvention">The <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/> that the type identity should be retreived for.</param>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> that is being exported.</param>
            <returns>A <see cref="T:System.String"/> containing the type identity for the export.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.IContractService.GetImportContractName(MefContrib.Hosting.Conventions.IImportConvention,System.Reflection.MemberInfo)">
            <summary>
            Gets contract name for the provided <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/>.
            </summary>
            <param name="importConvention">The <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/> that the contract name should be retreived for.</param>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> that is being imported.</param>
            <returns>A <see cref="T:System.String"/> containing the contract name for the import.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.IContractService.GetImportTypeIdentity(MefContrib.Hosting.Conventions.IImportConvention,System.Reflection.MemberInfo)">
            <summary>
            Gets type identity for the provided <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/>.
            </summary>
            <param name="importConvention">The <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/> that the type identity should be retreived for.</param>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> that is being imported.</param>
            <returns>A <see cref="T:System.String"/> containing the type identity for the imported.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ConventionContractService.GetExportContractName(MefContrib.Hosting.Conventions.IExportConvention,System.Reflection.MemberInfo)">
            <summary>
            Gets contract name for the provided <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/>.
            </summary>
            <param name="exportConvention">The <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/> that the contract name should be retreived for.</param>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> that is being exported.</param>
            <returns>A <see cref="T:System.String"/> containing the contract name for the export.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="member"/> or <paramref name="exportConvention"/> parameter was <see langword="null"/>.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ConventionContractService.GetExportTypeIdentity(MefContrib.Hosting.Conventions.IExportConvention,System.Reflection.MemberInfo)">
            <summary>
            Gets type identity for the provided <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/>.
            </summary>
            <param name="exportConvention">The <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/> that the type identity should be retreived for.</param>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> that is being exported.</param>
            <returns>A <see cref="T:System.String"/> containing the type identity for the export.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="member"/> or <paramref name="exportConvention"/> parameter was <see langword="null"/>.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ConventionContractService.GetImportContractName(MefContrib.Hosting.Conventions.IImportConvention,System.Reflection.MemberInfo)">
            <summary>
            Gets contract name for the provided <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/>.
            </summary>
            <param name="importConvention">The <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/> that the contract name should be retreived for.</param>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> that is being imported.</param>
            <returns>A <see cref="T:System.String"/> containing the contract name for the import.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="member"/> or <paramref name="importConvention"/> parameter was <see langword="null"/>.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ConventionContractService.GetImportTypeIdentity(MefContrib.Hosting.Conventions.IImportConvention,System.Reflection.MemberInfo)">
            <summary>
            Gets type identity for the provided <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/>.
            </summary>
            <param name="importConvention">The <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/> that the type identity should be retreived for.</param>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> that is being imported.</param>
            <returns>A <see cref="T:System.String"/> containing the type identity for the imported.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="member"/> or <paramref name="importConvention"/> parameter was <see langword="null"/>.</exception>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.ConventionPart`1">
            <summary>
            A wrapper class that enables a type to be composed using conventions.
            </summary>
            <typeparam name="TCompose">The <see cref="T:System.Type"/> that should be composed.</typeparam>
            <remarks>This class is required to bridge the gap between the convention based composition and the attributed based composition.</remarks>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ConventionPart`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.ConventionPart`1"/> class.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ConventionPart`1.OnImportsSatisfied">
            <summary>
            Called when <see cref="P:MefContrib.Hosting.Conventions.ConventionPart`1.Imports"/> has been satisfied.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.ConventionPart`1.Imports">
            <summary>
            Gets or sets the types that was composed.
            </summary>
            <value>An array of composed instances of the type specified by <typeparam name="TCompose"/>.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.ConventionPart`1.HasBeenSatisfied">
            <summary>
            Gets or sets a value indicating whether this instance has been satisfied.
            </summary>
            <value><see langword="true"/> if this instance has been satisfied; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.ConventionPartCreator">
            <summary>
            
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ConventionPartCreator.#ctor(MefContrib.Hosting.Conventions.Configuration.IPartRegistry{MefContrib.Hosting.Conventions.IContractService})">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.ConventionPartCreator"/> class.
            </summary>
            <param name="registry">The <see cref="T:MefContrib.Hosting.Conventions.Configuration.IPartRegistry`1"/> instance that should be used by the part creator.</param>
            <exception cref="T:System.ArgumentNullException">The provided <paramref name="registry"/> was <see langword="null"/>.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ConventionPartCreator.CreateParts">
            <summary>
            Creates <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances from the <see cref="T:MefContrib.Hosting.Conventions.IPartConvention"/> and types.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>, containing <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ConventionPartCreator.CreateExportDefinitions(System.Collections.Generic.IEnumerable{MefContrib.Hosting.Conventions.IExportConvention},System.Type)">
            <summary>
            Creates <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition"/> instance from the provided <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/> instances and type.
            </summary>
            <param name="exportConventions">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/> instances that should be used to create the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition"/> instances.</param>
            <param name="type">The <see cref="T:System.Type"/> for which the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition"/> instances should be created.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition"/> instances.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ConventionPartCreator.CreateImportDefinitions(System.Collections.Generic.IEnumerable{MefContrib.Hosting.Conventions.IImportConvention},System.Type)">
            <summary>
            Creates <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> instance from the provided <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/> instances and type.
            </summary>
            <param name="importConventions">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/> instances that should be used to create the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> instances.</param>
            <param name="type">The <see cref="T:System.Type"/> for which the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> instances should be created.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> instances.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ConventionPartCreator.GetImportParameterDefinition(MefContrib.Hosting.Conventions.IImportConvention,System.Reflection.ParameterInfo)">
            <summary>
            Gets an <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> for a <see cref="T:System.Reflection.ParameterInfo"/> instance using the provided <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/> instance.
            </summary>
            <param name="importConvention"><see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/> instances that should be used to create the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> instances.</param>
            <param name="parameter">The <see cref="T:System.Reflection.ParameterInfo"/> for which the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> instances should be created.</param>
            <returns>An <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> instance.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ConventionPartCreator.GetImportDefinition(MefContrib.Hosting.Conventions.IImportConvention,System.Reflection.MemberInfo)">
            <summary>
            Gets an <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> for a <see cref="T:System.Reflection.MemberInfo"/> instance using the provided <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/> instance.
            </summary>
            <param name="importConvention"><see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/> instances that should be used to create the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> instances.</param>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> for which the <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> instances should be created.</param>
            <returns>An <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> instance.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ConventionPartCreator.CreatePartDefinition(MefContrib.Hosting.Conventions.IPartConvention,System.Type)">
            <summary>
            Create a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> for a specified type using the provided <see cref="T:MefContrib.Hosting.Conventions.IPartConvention"/>.
            </summary>
            <param name="convention">The <see cref="T:MefContrib.Hosting.Conventions.IPartConvention"/> instance which is used to create the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/>.</param>
            <param name="type">The <see cref="T:System.Type"/> for which the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> should be created.</param>
            <returns>A <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instance.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ConventionPartCreator.GetExportDefinitionMetadata(MefContrib.Hosting.Conventions.IExportConvention,System.Reflection.MemberInfo)">
            <summary>
            Gets the metadata for the provided <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/>.
            </summary>
            <param name="exportConvention">The <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/> that the metadata should be retrieved for.</param>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> that is being exported.</param>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the metadata for the export.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ConventionPartCreator.GetPartDefinitionMetadata(MefContrib.Hosting.Conventions.IPartConvention)">
            <summary>
            Gets the metadata for the provided <see cref="T:MefContrib.Hosting.Conventions.IPartConvention"/>.
            </summary>
            <param name="partConvention">The <see cref="T:MefContrib.Hosting.Conventions.IPartConvention"/> that the metadata should be retrieved for.</param>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> containing the metadata for the part.</returns>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.ConventionPartCreator.Registry">
            <summary>
            Gets the <see cref="T:MefContrib.Hosting.Conventions.Configuration.IPartRegistry`1"/> instance used by the part creator.
            </summary>
            <value>An <see cref="T:MefContrib.Hosting.Conventions.Configuration.IPartRegistry`1"/> instance.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.ConventionPartCreator.Scanner">
            <summary>
            Gets the <see cref="T:MefContrib.Hosting.Conventions.ITypeScanner"/> used by the <see cref="P:MefContrib.Hosting.Conventions.ConventionPartCreator.Registry"/>.
            </summary>
            <value>An <see cref="T:MefContrib.Hosting.Conventions.ITypeScanner"/> instance.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.ConventionPartCreator.ContractService">
            <summary>
            Gets the <see cref="T:MefContrib.Hosting.Conventions.IContractService"/> used by the <see cref="P:MefContrib.Hosting.Conventions.ConventionPartCreator.Registry"/>.
            </summary>
            <value>An <see cref="T:MefContrib.Hosting.Conventions.IContractService"/> instance.</value>
        </member>
        <member name="T:MefContrib.Hosting.Interception.IPartHandler">
            <summary>
            Defines a composable part definition handler which can be used to filter
            parts or create them on the fly.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Interception.IPartHandler.Initialize(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)">
            <summary>
            Initializes the part handler.
            </summary>
            <param name="interceptedCatalog">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> being intercepted.</param>
        </member>
        <member name="M:MefContrib.Hosting.Interception.IPartHandler.GetParts(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition})">
            <summary>
            Method which can filter or produce <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances.
            </summary>
            <param name="parts">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances.</returns>
            <remarks>This method is called at most once when the <see cref="P:MefContrib.Hosting.Interception.InterceptingCatalog.Parts"/>
            property is being calculated.</remarks>
        </member>
        <member name="E:MefContrib.Hosting.Interception.IPartHandler.Changed">
            <summary>
            Occurs when <see cref="T:MefContrib.Hosting.Interception.IPartHandler"/> is changed.
            </summary>
            <remarks>This event is used by the <see cref="T:MefContrib.Hosting.Interception.InterceptingCatalog"/>.
            When the event is raised, the catalog is recomposed.</remarks>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ConventionPartHandler.#ctor(MefContrib.Hosting.Conventions.Configuration.IPartRegistry{MefContrib.Hosting.Conventions.IContractService}[])">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.ConventionPartHandler"/> class, using the provided array part registries.
            </summary>
            <param name="registries">An array of <see cref="T:MefContrib.Hosting.Conventions.Configuration.IPartRegistry`1"/> instance.</param>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ConventionPartHandler.Initialize(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)">
            <summary>
            Initializes this export handler.
            </summary>
            <param name="interceptedCatalog">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> being intercepted.</param>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ConventionPartHandler.CreateParts">
            <summary>
            Creates <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances from the <see cref="T:MefContrib.Hosting.Conventions.IPartConvention"/> and types.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>, containing <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances.</returns>
        </member>
        <member name="E:MefContrib.Hosting.Conventions.ConventionPartHandler.Changed">
            <summary>
            Occurs when <see cref="T:MefContrib.Hosting.Conventions.ConventionPartHandler"/> is changed.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.DefaultConventionContractService">
            <summary>
            Contains the methods used to retrive contract name and type identity for imports and exports. The
            class will first check and see if there are any default conventions stores for the contract name
            and contract type, of the request type, before falling back to the implementation defined by the
            base class <see cref="T:MefContrib.Hosting.Conventions.ConventionContractService"/>.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.DefaultConventionContractService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.DefaultConventionContractService"/> class.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.DefaultConventionContractService.GetExportContractName(MefContrib.Hosting.Conventions.IExportConvention,System.Reflection.MemberInfo)">
            <summary>
            Gets contract name for the provided <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/>.
            </summary>
            <param name="exportConvention">The <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/> that the contract name should be retreived for.</param>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> that is being exported.</param>
            <returns>A <see cref="T:System.String"/> containing the contract name for the export.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="member"/> or <paramref name="exportConvention"/> parameter was <see langword="null"/>.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.DefaultConventionContractService.GetExportTypeIdentity(MefContrib.Hosting.Conventions.IExportConvention,System.Reflection.MemberInfo)">
            <summary>
            Gets type identity for the provided <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/>.
            </summary>
            <param name="exportConvention">The <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/> that the type identity should be retreived for.</param>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> that is being exported.</param>
            <returns>A <see cref="T:System.String"/> containing the type identity for the export.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="member"/> or <paramref name="exportConvention"/> parameter was <see langword="null"/>.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.DefaultConventionContractService.GetImportContractName(MefContrib.Hosting.Conventions.IImportConvention,System.Reflection.MemberInfo)">
            <summary>
            Gets contract name for the provided <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/>.
            </summary>
            <param name="importConvention">The <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/> that the contract name should be retreived for.</param>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> that is being imported.</param>
            <returns>A <see cref="T:System.String"/> containing the contract name for the import.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="member"/> or <paramref name="importConvention"/> parameter was <see langword="null"/>.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.DefaultConventionContractService.GetImportTypeIdentity(MefContrib.Hosting.Conventions.IImportConvention,System.Reflection.MemberInfo)">
            <summary>
            Gets type identity for the provided <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/>.
            </summary>
            <param name="importConvention">The <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/> that the type identity should be retreived for.</param>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> that is being imported.</param>
            <returns>A <see cref="T:System.String"/> containing the type identity for the imported.</returns>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="member"/> or <paramref name="importConvention"/> parameter was <see langword="null"/>.</exception>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.DefaultConventionContractService.DefaultConventions">
            <summary>
            Gets or sets the default conventions.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IList`1"/> instance, containing <see cref="T:MefContrib.Hosting.Conventions.Configuration.TypeDefaultConvention"/> instances.</value>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.DirectoryTypeScanner">
            <summary>
            Scans an directory for types that matches a provided predicate
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.DirectoryTypeScanner.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.DirectoryTypeScanner"/> class.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing the path from where the assemblies should be loaded.</param>
            <exception cref="T:System.ArgumentNullException">The value provided to the <paramref name="path"/> was <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value provided to the <paramref name="path"/> was empty.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The directory specified by the <paramref name="path"/> paramter could not be found.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.DirectoryTypeScanner.GetAssemblyScanners">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="P:MefContrib.Hosting.Conventions.DirectoryTypeScanner.AssemblyScanners"/> for the assemblies that
            is located in the folder specified by the <see cref="P:MefContrib.Hosting.Conventions.DirectoryTypeScanner.Path"/> property.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.DirectoryTypeScanner.GetTypes(System.Predicate{System.Type})">
            <summary>
            Retreives a collection of <see cref="T:System.Type"/> instances that matched the provided <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A <see cref="T:System.Predicate`1"/> used to match the types to return.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the matched types.</returns>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.DirectoryTypeScanner.AssemblyScanners">
            <summary>
            Gets or sets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:MefContrib.Hosting.Conventions.AssemblyTypeScanner"/> instances.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:MefContrib.Hosting.Conventions.AssemblyTypeScanner"/> instances.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.DirectoryTypeScanner.Path">
            <summary>
            Gets the path where types should be loaded from.
            </summary>
            <value>A <see cref="T:System.String"/> containing the path of the folder where types are loaded from.</value>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.EnumerableExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.EnumerableExtensions.ToMetadataDictionary(System.Collections.Generic.IEnumerable{MefContrib.Hosting.Conventions.MetadataItem})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:MefContrib.Hosting.Conventions.MetadataItem"/> instances into a <see cref="T:System.Collections.Generic.Dictionary`2"/>
            of string and object.
            </summary>
            <param name="metadata">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:MefContrib.Hosting.Conventions.MetadataItem"/></param> instances to convert.
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> of string and object, containing the converted metadata.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.ExportConvention">
            <summary>
            Provides the functionality to define a convention which will be used to create exports.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.IExportConvention">
            <summary>
            Defines the functionality of a convention used to define exports.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.IExportConvention.ContractName">
            <summary>
            Gets or sets the contract name used to identify the export.
            </summary>
            <value></value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.IExportConvention.ContractType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of the contract.
            </summary>
            <value></value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.IExportConvention.Members">
            <summary>
            Gets or sets a function that returns the members on a given type that should be treated as exports.
            </summary>
            <value>A <see cref="T:System.Func`2"/> instance that returnes a collection of <see cref="T:System.Reflection.MemberInfo"/> instanced base on a provided <see cref="T:System.Type"/>.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.IExportConvention.Metadata">
            <summary>
            Gets or sets the metadata which should be associated with the export.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IList`1"/> instance, containing <see cref="P:MefContrib.Hosting.Conventions.IExportConvention.Metadata"/> objects.</value>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ExportConvention.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.ExportConvention"/> class.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ExportConvention.Equals(MefContrib.Hosting.Conventions.ExportConvention)">
            <summary>
            Indicates whether the current <see cref="T:MefContrib.Hosting.Conventions.ExportConvention"/> is equal to another <see cref="T:MefContrib.Hosting.Conventions.ExportConvention"/> of the same type.
            </summary>
            <param name="convention">An <see cref="T:MefContrib.Hosting.Conventions.ExportConvention"/> to compare with this <see cref="T:MefContrib.Hosting.Conventions.ExportConvention"/>.</param>
            <returns><see langword="true"/> if the current <see cref="T:MefContrib.Hosting.Conventions.ExportConvention"/> is equal to the <paramref name="convention"/> parameter; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.ExportConvention.ContractName">
            <summary>
            Gets or sets the contract name used to identify the export.
            </summary>
            <value></value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.ExportConvention.ContractType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of the contract.
            </summary>
            <value></value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.ExportConvention.Members">
            <summary>
            Gets or sets a function that returns the members on a given type that should be treated as exports.
            </summary>
            <value>A <see cref="T:System.Func`2"/> instance that returnes a collection of <see cref="T:System.Reflection.MemberInfo"/> instanced base on a provided <see cref="T:System.Type"/>.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.ExportConvention.Metadata">
            <summary>
            Gets or sets the metadata which should be associated with the export.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IList`1"/> instance, containing <see cref="P:MefContrib.Hosting.Conventions.ExportConvention.Metadata"/> objects.</value>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.ExpressionExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.Linq.Expressions.Expression"/> type.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ExpressionExtensions.GetTargetMemberInfo(System.Linq.Expressions.Expression)">
            <summary>
            Retrieves the member that an expression is defined for.
            </summary>
            <param name="expression">The expression to retreive the member from.</param>
            <returns>A <see cref="T:System.Reflection.MemberInfo"/> instance if the member could be found; otherwise <see langword="null"/>.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.Section.ExportElement">
            <summary>
            Represents a configuration element for an export.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.Section.ExportElement.ContractName">
            <summary>
            Gets or sets the name of the contract.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.Section.ExportElement.ContractType">
            <summary>
            Gets or sets the type of the contract.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.Section.ExportElement.Member">
            <summary>
            Gets or sets the name of the member.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.Section.ExportElement.Metadata">
            <summary>
            Gets a collection of all the metadata defined for the <see cref="T:MefContrib.Hosting.Conventions.Configuration.Section.ImportElement"/>.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.Section.ExportElementCollection">
            <summary>
            Represents a collection of <see cref="T:MefContrib.Hosting.Conventions.Configuration.Section.ExportElement"/> instances.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.Section.ImportElement">
            <summary>
            Represents a configuration element for an import.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.Section.ImportElement.AllowDefault">
            <summary>
            Gets or sets if default values are allowed.
            </summary>
            <value>A string containing the name of the contract.</value>
            <remarks>The default value is <see langword="false" />.</remarks>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.Section.ImportElement.ContractName">
            <summary>
            Gets or sets the name of the contract.
            </summary>
            <value>A string containing the name of the contract.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.Section.ImportElement.ContractType">
            <summary>
            Gets or sets the type of the contract.
            </summary>
            <value>A string containing the type of the contract.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.Section.ImportElement.CreationPolicy">
            <summary>
            Gets or sets required import policy.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.Section.ImportElement.IsRecomposable">
            <summary>
            Gets or sets if the import is recomposable.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.Section.ImportElement.Member">
            <summary>
            Gets or sets the name of the member.
            </summary>
            <value>A string containing the name of the member.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.Section.ImportElement.RequiredMetadata">
            <summary>
            Gets a collection of all the metadata defined for the <see cref="T:MefContrib.Hosting.Conventions.Configuration.Section.ImportElement"/>.
            </summary>
            <value>A <see cref="T:MefContrib.Hosting.Conventions.Configuration.Section.MetadataElementCollection"/> object.</value>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.Section.ImportElementCollection">
            <summary>
            Represents a collection of <see cref="T:MefContrib.Hosting.Conventions.Configuration.Section.ImportElement"/> instances.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.Section.MetadataElement">
            <summary>
            Represents a configuration element for a metadata item.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.Section.MetadataElement.Name">
            <summary>
            Gets or sets the name of the metadata.
            </summary>
            <value>A string containing the name of the metadata.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.Section.MetadataElement.Value">
            <summary>
            Gets or sets the value of the metadata.
            </summary>
            <value>A string containing the value of the metadata.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.Section.MetadataElement.Type">
            <summary>
            Gets or sets the type of the metadata.
            </summary>
            <value>A string containing the type of the metadata.</value>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.Section.MetadataElementCollection">
            <summary>
            Represents a collection of <see cref="T:MefContrib.Hosting.Conventions.Configuration.Section.ExportElement"/> instances.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.Section.PartElement">
            <summary>
            Represents a configuration element for an export.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.Section.PartElement.Exports">
            <summary>
            Gets a collection of all the exports defined for the <see cref="T:MefContrib.Hosting.Conventions.Configuration.Section.PartElement"/>.
            </summary>
            <value>A <see cref="T:MefContrib.Hosting.Conventions.Configuration.Section.ExportElementCollection"/> object.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.Section.PartElement.Imports">
            <summary>
            Gets a collection of all the imports defined for the <see cref="T:MefContrib.Hosting.Conventions.Configuration.Section.PartElement"/>.
            </summary>
            <value>A <see cref="T:MefContrib.Hosting.Conventions.Configuration.Section.ImportElementCollection"/> object.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.Section.PartElement.Type">
            <summary>
            Gets or sets the type of the part.
            </summary>
            <value>A string containing the type of the part.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.Section.PartElement.CreationPolicy">
            <summary>
            Gets or sets the creation policy.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.Section.PartElement.Metadata">
            <summary>
            Gets a collection of all the metadata defined for the <see cref="T:MefContrib.Hosting.Conventions.Configuration.Section.PartElement"/>.
            </summary>
            <value>A <see cref="T:MefContrib.Hosting.Conventions.Configuration.Section.MetadataElementCollection"/> object.</value>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.Section.PartElementCollection">
            <summary>
            Represents a collection of <see cref="T:MefContrib.Hosting.Conventions.Configuration.Section.PartElement"/> instances.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.Configuration.Section.ConventionConfigurationSection">
            <summary>
            Represents configuration section for configuring parts for <see cref="T:MefContrib.Hosting.Conventions.ConventionCatalog"/>.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.Configuration.Section.ConventionConfigurationSection.Parts">
            <summary>
            Gets a collection of <see cref="T:MefContrib.Hosting.Conventions.Configuration.Section.PartElement"/> instances.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.EmptyCatalog">
            <summary>
            Defines a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> implementation that always returns an empty collection of parts.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.EmptyCatalog.Parts">
            <summary>
            Gets an empty <see cref="T:System.Linq.IQueryable`1"/> collection.
            </summary>
            <returns>An empty <see cref="T:System.Linq.IQueryable`1"/> instance.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Filter.FilteringPartHandler">
            <summary>
            Defines a part handler which performs filtering based on a given criteria.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Filter.FilteringPartHandler.#ctor(System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Filter.FilteringPartHandler"/> class.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:MefContrib.Hosting.Filter.FilteringPartHandler.Initialize(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)">
            <summary>
            Initializes the part handler.
            </summary>
            <param name="interceptedCatalog">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> being intercepted.</param>
        </member>
        <member name="M:MefContrib.Hosting.Filter.FilteringPartHandler.GetParts(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition})">
            <summary>
            Method which can filter or produce parts.
            </summary>
            <param name="parts">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances.</returns>
            <remarks>This method is called at most once when the <see cref="P:MefContrib.Hosting.Interception.InterceptingCatalog.Parts"/>
            property is being calculated.</remarks>
        </member>
        <member name="E:MefContrib.Hosting.Filter.FilteringPartHandler.Changed">
            <summary>
            Occurs when <see cref="T:MefContrib.Hosting.Interception.IPartHandler"/> is changed.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Generics.GenericCatalog">
            <summary>
            Defines a composable parts catalog which enables open-generics support.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Generics.GenericCatalog.#ctor(MefContrib.Hosting.Generics.IGenericContractRegistry[])">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Generics.GenericCatalog"/> class.
            </summary>
            <param name="registries"> A collection of <see cref="T:MefContrib.Hosting.Generics.IGenericContractRegistry"/> instances.</param>
        </member>
        <member name="M:MefContrib.Hosting.Generics.GenericCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,MefContrib.Hosting.Generics.IGenericContractRegistry[])">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Generics.GenericCatalog"/> class.
            </summary>
            <param name="catalog"><see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> from which <see cref="T:MefContrib.Hosting.Generics.IGenericContractRegistry"/> instances will be retrieved.</param>
            <param name="registries">Additional registries.</param>
        </member>
        <member name="M:MefContrib.Hosting.Generics.GenericCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
            <summary>
            Method which can filter exports for given <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> or produce new exports.
            </summary>
            <param name="definition"><see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> instance.</param>
            <returns>
            A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition"/>
            instances along with their <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances which match given <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/>.
            </returns>
        </member>
        <member name="P:MefContrib.Hosting.Generics.GenericCatalog.Parts">
            <summary>
            Gets the part definitions of the catalog.
            </summary>
            <value>A <see cref="T:System.Linq.IQueryable`1"/> of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> objects of the <see cref="T:MefContrib.Hosting.Generics.GenericCatalog"/>.</value>
        </member>
        <member name="E:MefContrib.Hosting.Generics.GenericCatalog.Changed">
            <summary>
            Occurs when a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> has changed.
            </summary>
        </member>
        <member name="E:MefContrib.Hosting.Generics.GenericCatalog.Changing">
            <summary>
            Occurs when a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> is changing.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Generics.GenericTypeCatalog">
            <summary>
            Defines a catalog which produces closed-generic parts.
            </summary>
            <remarks>
            The catalog can rewrite <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> and its <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition"/>
            instances so that the type identity and optionally the contract name is always closed-generic.
            </remarks>
        </member>
        <member name="M:MefContrib.Hosting.Generics.GenericTypeCatalog.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Generics.GenericTypeCatalog"/> class.
            </summary>
            <param name="exportingType">The exporting type. This has to be closed-generic type.</param>
        </member>
        <member name="M:MefContrib.Hosting.Generics.GenericTypeCatalog.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Generics.GenericTypeCatalog"/> class.
            </summary>
            <param name="exportingType">The exporting type. This has to be closed-generic type.</param>
            <param name="contractType">The contract type. This has to be open-generic type.</param>
        </member>
        <member name="P:MefContrib.Hosting.Generics.GenericTypeCatalog.ExportingType">
            <summary>
            Gets the part type which declares the exports. This is always a closed-generic type.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Generics.GenericTypeCatalog.ContractType">
            <summary>
            Gets the contract type. This is always open-generic type.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Generics.MappingNotFoundException">
            <summary>
            Exception which identifies situation where open-generics mapping is not
            found for a given type.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Generics.MappingNotFoundException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Generics.MappingNotFoundException"/> class.
            </summary>
            <param name="type">The type for which the mapping was not found.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:MefContrib.Hosting.Generics.MappingNotFoundException.Type">
            <summary>
            Gets the type for which the mapping was not found.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Interception.PartHandlerChangedEventArgs">
            <summary>
            Defines arguments for <see cref="E:MefContrib.Hosting.Interception.IPartHandler.Changed"/> event.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Interception.PartHandlerChangedEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition})">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Interception.PartHandlerChangedEventArgs"/> class.
            </summary>
            <param name="addedDefinitions">A collection of added <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances.
            If no definitions were added, pass <see cref="M:System.Linq.Enumerable.Empty``1"/>.</param>
            <param name="removedDefinitions">A collection of removed <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances.
            If no definitions were removed, pass <see cref="M:System.Linq.Enumerable.Empty``1"/>.</param>
        </member>
        <member name="P:MefContrib.Hosting.Interception.PartHandlerChangedEventArgs.AddedDefinitions">
            <summary>
            Gets a collection of added definitions.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Interception.PartHandlerChangedEventArgs.RemovedDefinitions">
            <summary>
            Gets a collection of removed definitions.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.IImportConvention">
            <summary>
            Defines the functionality of a convention used to define imports.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.IImportConvention.AllowDefaultValue">
            <summary>
            Gets or sets a value indicating whether default values are allowed for the importing member.
            </summary>
            <value><see langword="true"/> if the import is allowed to have default values; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.IImportConvention.ContractName">
            <summary>
            Gets or sets the name of the contract.
            </summary>
            <value></value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.IImportConvention.ContractType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of the contract.
            </summary>
            <value></value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.IImportConvention.CreationPolicy">
            <summary>
            Gets or sets the creation policy of the import.
            </summary>
            <value>A <see cref="P:MefContrib.Hosting.Conventions.IImportConvention.CreationPolicy"/> enum value.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.IImportConvention.Members">
            <summary>
            Gets or sets a function that returns the members on a given type that should be treated as imports.
            </summary>
            <value>A <see cref="T:System.Func`2"/> instance that returnes a collection of <see cref="T:System.Reflection.MemberInfo"/> instanced base on a provided <see cref="T:System.Type"/>.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.IImportConvention.Recomposable">
            <summary>
            Gets or sets a value indicating whether or not the import can be recomposed.
            </summary>
            <value><see langword="true"/> if the import can be recomposed; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.IImportConvention.RequiredMetadata">
            <summary>
            Gets or sets the required metadata items.
            </summary>
            <value>A <see cref="T:System.Collections.Generic.IList`1"/> containing <see cref="T:MefContrib.Hosting.Conventions.RequiredMetadataItem"/> instances.</value>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.ImportConvention">
            <summary>
            Provides the functionality to define a convention which will be used to create imports.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ImportConvention.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.ImportConvention"/> class.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.ImportConvention.Equals(MefContrib.Hosting.Conventions.ImportConvention)">
            <summary>
            Indicates whether the current <see cref="T:MefContrib.Hosting.Conventions.ImportConvention"/> is equal to another <see cref="T:MefContrib.Hosting.Conventions.ImportConvention"/> of the same type.
            </summary>
            <param name="convention">An <see cref="T:MefContrib.Hosting.Conventions.ImportConvention"/> to compare with this <see cref="T:MefContrib.Hosting.Conventions.ImportConvention"/>.</param>
            <returns><see langword="true"/> if the current <see cref="T:MefContrib.Hosting.Conventions.ImportConvention"/> is equal to the <paramref name="convention"/> parameter; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.ImportConvention.AllowDefaultValue">
            <summary>
            Gets or sets a value indicating whether default values are allowed for the importing member.
            </summary>
            <value><see langword="true"/> if the import is allowed to have default values; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.ImportConvention.ContractName">
            <summary>
            Gets or sets the contract name used to identify the import.
            </summary>
            <value></value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.ImportConvention.ContractType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> that defines the context of the <see cref="P:MefContrib.Hosting.Conventions.ImportConvention.ContractName"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.ImportConvention.CreationPolicy">
            <summary>
            Gets or sets the creation policy of the import.
            </summary>
            <value>A <see cref="P:MefContrib.Hosting.Conventions.ImportConvention.CreationPolicy"/> enum value.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.ImportConvention.Members">
            <summary>
            Gets or sets a function that returns the members on a given type that should be treated as imports.
            </summary>
            <value>A <see cref="T:System.Func`2"/> instance that returnes a collection of <see cref="T:System.Reflection.MemberInfo"/> instanced base on a provided <see cref="T:System.Type"/>.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.ImportConvention.Recomposable">
            <summary>
            Gets or sets a value indicating whether or not the import can be recomposed.
            </summary>
            <value><see langword="true"/> if the import can be recomposed; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.ImportConvention.RequiredMetadata">
            <summary>
            Gets or sets the required metadata items.
            </summary>
            <value>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing <see cref="T:MefContrib.Hosting.Conventions.RequiredMetadataItem"/> instances.</value>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.IPartConvention">
            <summary>
            Defines the functionality of a convention used to define parts.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.IPartConvention.Condition">
            <summary>
            Gets or sets the condition used to idenfity the types that is used by the convention to create parts.
            </summary>
            <value>A <see cref="T:System.Predicate`1"/> instance.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.IPartConvention.CreationPolicy">
            <summary>
            Gets or sets the creation policy of the created parts.
            </summary>
            <value>A <see cref="P:MefContrib.Hosting.Conventions.IPartConvention.CreationPolicy"/> enum value.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.IPartConvention.Exports">
            <summary>
            Gets or sets the exports that should be assigned to parts created by the convention.
            </summary>
            <value>An <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/> instance.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.IPartConvention.Imports">
            <summary>
            Gets or sets the imports that should be assigned to parts created by the convention.
            </summary>
            <value>An <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/> instance.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.IPartConvention.Metadata">
            <summary>
            Gets or sets the metadata which should be associated with the part.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IList`1"/> instance, containing <see cref="P:MefContrib.Hosting.Conventions.IPartConvention.Metadata"/> objects.</value>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.MemberInfoExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.Reflection.MemberInfo"/> interface.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.MemberInfoExtensions.GetCardinality(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the cardinality of the <see cref="T:System.Reflection.MemberInfo"/> instance.
            </summary>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> to check the cardinality of.</param>
            <param name="allowDefault"><see langword="true"/> if the default value of the member can be used if no exports match; otherwise <see langword="false"/>.</param>
            <returns>An <see cref="T:System.ComponentModel.Composition.Primitives.ImportCardinality"/> value, reflecting the cardinality of the member.</returns>
            <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">The cardinality could not be retrieved from the provided <see cref="T:System.Reflection.MemberInfo"/>.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.MemberInfoExtensions.GetCardinality(System.Type,System.Boolean)">
            <summary>
            Gets the cardinality of the <see cref="T:System.Type"/> instance.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check the cardinality of.</param>
            <param name="allowDefault"><see langword="true"/> if the default value of the type can be used if no exports match; otherwise <see langword="false"/>.</param>
            <returns>An <see cref="T:System.ComponentModel.Composition.Primitives.ImportCardinality"/> value, reflecting the cardinality of the type.</returns>
            <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">The cardinality could not be retrieved from the provided <see cref="T:System.Type"/>.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.MemberInfoExtensions.GetContractMember(System.Reflection.MemberInfo)">
            <summary>
            Gets the type of the return type for the <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> to get the return type of.</param>
            <returns>A <see cref="T:System.Type"/> instance.</returns>
            <remarks>
            For <see cref="T:System.Reflection.MemberInfo"/> instances with a <see cref="P:System.Reflection.MemberInfo.MemberType"/> value of <see cref="F:System.Reflection.MemberTypes.TypeInfo"/> or
            <see cref="F:System.Reflection.MemberTypes.NestedType"/>, the actuall <see cref="T:System.Type"/> will be returned.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Can only retrieve type for fields, properties, methods or types.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.MemberInfoExtensions.ToLazyMemberInfo(System.Reflection.MemberInfo)">
            <summary>
            Converts the provided <see cref="T:System.Reflection.MemberInfo"/> instance into a <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo"/> instance.
            </summary>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> instance to convert.</param>
            <returns>A <see cref="T:System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo"/> instance for the <see cref="T:System.Reflection.MemberInfo"/> instances provided by the <paramref name="member"/> parameter.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.MetadataItem">
            <summary>
            Defines a metadata value which is eposed by an parts and exports.
            </summary>
        </member>
        <member name="F:MefContrib.Hosting.Conventions.MetadataItem.Name">
            <summary>
            Gets or sets the name of the <see cref="T:MefContrib.Hosting.Conventions.MetadataItem"/>.
            </summary>
            <value>A <see cref="T:System.String"/> containing the name of the <see cref="T:MefContrib.Hosting.Conventions.MetadataItem"/>.</value>
        </member>
        <member name="F:MefContrib.Hosting.Conventions.MetadataItem.Value">
            <summary>
            Gets or sets the value of the <see cref="T:MefContrib.Hosting.Conventions.MetadataItem"/>.
            </summary>
            <value>An <see cref="T:System.Object"/> containing the value of the <see cref="T:MefContrib.Hosting.Conventions.MetadataItem"/>.</value>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.MetadataItem.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.MetadataItem"/> struct.
            </summary>
            <param name="name">A <see cref="T:System.String"/> containing the name of the <see cref="T:MefContrib.Hosting.Conventions.MetadataItem"/>.</param>
            <param name="value">A <see cref="T:System.Func`2"/> function used to retrieve the value of the <see cref="T:MefContrib.Hosting.Conventions.MetadataItem"/>.</param>
            <exception cref="T:System.ArgumentNullException">The value of the <paramref name="name"/> or <see cref="!:value"/> parameters were <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The lenght of the <paramref name="name"/> parameter was zero.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.MetadataItem.Equals(MefContrib.Hosting.Conventions.MetadataItem)">
            <summary>
            Indicates whether the current <see cref="T:MefContrib.Hosting.Conventions.MetadataItem"/> is equal to another <see cref="T:MefContrib.Hosting.Conventions.MetadataItem"/> of the same type.
            </summary>
            <param name="item">An <see cref="T:MefContrib.Hosting.Conventions.MetadataItem"/> to compare with this <see cref="T:MefContrib.Hosting.Conventions.MetadataItem"/>.</param>
            <returns><see langword="true"/> if the current <see cref="T:MefContrib.Hosting.Conventions.MetadataItem"/> is equal to the <paramref name="item"/> parameter; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.MetadataItem.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.MetadataItem.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.PartConvention">
            <summary>
            Provides the functionality to define a convention which will be used to create parts.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.PartConvention.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.PartConvention"/> class.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.PartConvention.Condition">
            <summary>
            Gets or sets the condition used to idenfity the types that is used by the convention to create parts.
            </summary>
            <value>A <see cref="T:System.Predicate`1"/> instance.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.PartConvention.CreationPolicy">
            <summary>
            Gets or sets the creation policy of the created parts.
            </summary>
            <value>A <see cref="P:MefContrib.Hosting.Conventions.PartConvention.CreationPolicy"/> enum value.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.PartConvention.Exports">
            <summary>
            Gets or sets the exports that should be assigned to parts created by the convention.
            </summary>
            <value>An <see cref="T:MefContrib.Hosting.Conventions.IExportConvention"/> instance.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.PartConvention.Imports">
            <summary>
            Gets or sets the imports that should be assigned to parts created by the convention.
            </summary>
            <value>An <see cref="T:MefContrib.Hosting.Conventions.IImportConvention"/> instance.</value>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.PartConvention.Metadata">
            <summary>
            Gets or sets the metadata which should be associated with the part.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.IList`1"/> instance, containing <see cref="P:MefContrib.Hosting.Conventions.PartConvention.Metadata"/> objects.</value>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.PartRegistryLocator">
            <summary>
            Locates <see cref="T:MefContrib.Hosting.Conventions.Configuration.IPartRegistry`1"/> instances by inspecting the <see cref="T:MefContrib.Hosting.Conventions.ITypeScanner"/> of each
            registry. It will recurse any located registry until no more are found.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.PartRegistryLocator.#ctor(System.Collections.Generic.IEnumerable{MefContrib.Hosting.Conventions.Configuration.IPartRegistry{MefContrib.Hosting.Conventions.IContractService}})">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.PartRegistryLocator"/> class.
            </summary>
            <param name="registries">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:MefContrib.Hosting.Conventions.Configuration.IPartRegistry`1"/> instances that the locator should inspect for more available registries.</param>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.PartRegistryLocator.GetRegistries">
            <summary>
            Locates <see cref="T:MefContrib.Hosting.Conventions.Configuration.IPartRegistry`1"/> instances in the available <see cref="T:MefContrib.Hosting.Conventions.Configuration.IPartRegistry`1"/> collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:MefContrib.Hosting.Conventions.Configuration.IPartRegistry`1"/> instances.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.RequiredMetadataItem">
            <summary>
            Defines a metadata key which is required by an import.
            </summary>
        </member>
        <member name="F:MefContrib.Hosting.Conventions.RequiredMetadataItem.Name">
            <summary>
            Gets or sets the name of the required metadata item.
            </summary>
            <value>A <see cref="T:System.String"/> containing the name of the required metadata item.</value>
        </member>
        <member name="F:MefContrib.Hosting.Conventions.RequiredMetadataItem.Type">
            <summary>
            Gets or sets the type of the required metadata item.
            </summary>
            <value>A <see cref="F:MefContrib.Hosting.Conventions.RequiredMetadataItem.Type"/> instance.</value>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.RequiredMetadataItem.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.RequiredMetadataItem"/> struct.
            </summary>
            <param name="name">The name of the required metadata item.</param>
            <param name="type">The type of the value of the required metadata item.</param>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.RequiredMetadataItem.op_Implicit(MefContrib.Hosting.Conventions.RequiredMetadataItem)~System.Collections.Generic.KeyValuePair{System.String,System.Type}">
            <summary>
            Performs an implicit conversion from <see cref="T:MefContrib.Hosting.Conventions.RequiredMetadataItem"/> to <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <param name="requiredMetadataItem">The required metadata item.</param>
            <returns>A <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instance containing the result of the conversion.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.RequiredMetadataItem.Equals(MefContrib.Hosting.Conventions.RequiredMetadataItem)">
            <summary>
            Indicates whether the current <see cref="T:MefContrib.Hosting.Conventions.RequiredMetadataItem"/> is equal to another <see cref="T:MefContrib.Hosting.Conventions.RequiredMetadataItem"/> of the same type.
            </summary>
            <returns><see langword="true"/> if the current <see cref="T:MefContrib.Hosting.Conventions.RequiredMetadataItem"/> is equal to the <paramref name="requiredMetadataItem"/> parameter; otherwise, <see langword="false"/>.</returns>
            <param name="requiredMetadataItem">An <see cref="T:MefContrib.Hosting.Conventions.RequiredMetadataItem"/> to compare with this <see cref="T:MefContrib.Hosting.Conventions.RequiredMetadataItem"/>.</param>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.RequiredMetadataItem.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.RequiredMetadataItem.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.TypeExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.Type"/> type.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.TypeExtensions.IsCollection(System.Type)">
            <summary>
            Checks if the <see cref="T:System.Type"/> implements the <see cref="T:System.Collections.ICollection"/> interface.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to inspect.</param>
            <returns><see langword="true"/> if the type implements the <see cref="T:System.Collections.ICollection"/> interface; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
            Checks if the <see cref="T:System.Type"/> implements the <see cref="T:System.Collections.IEnumerable"/> interface.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to inspect.</param>
            <returns><see langword="true"/> if the type iimplements the <see cref="T:System.Collections.IEnumerable"/> interface; otherwise <see langword="false"/>.</returns>
            <remarks>The method will return <see langword="false"/> for <see cref="T:System.String"/> type.</remarks>
        </member>
        <member name="T:MefContrib.Hosting.Conventions.TypeScanner">
            <summary>
            Stores the types which will be available to the <see cref="T:MefContrib.Hosting.Conventions.ConventionCatalog"/> when creating parts from conventions.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.TypeScanner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.TypeScanner"/> class.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.TypeScanner.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.TypeScanner"/> class.
            </summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance of <see cref="T:System.Type"/> objects that should be used by the type scanner.</param>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.TypeScanner.#ctor(System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Conventions.TypeScanner"/> class.
            </summary>
            <param name="values">A function that returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance of <see cref="T:System.Type"/> objects that should be used by the type scanner.</param>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.TypeScanner.AddTypes(System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Adds the types, returned by the function, to the type scanner.
            </summary>
            <param name="typeValueGetter">The type value getter function.</param>
        </member>
        <member name="M:MefContrib.Hosting.Conventions.TypeScanner.GetTypes(System.Predicate{System.Type})">
            <summary>
            Retreives a collection of <see cref="T:System.Type"/> instances that matched the provided <paramref name="predicate"/>.
            </summary>
            <param name="predicate">A <see cref="T:System.Predicate`1"/> used to match the types to return.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the matched types.</returns>
        </member>
        <member name="P:MefContrib.Hosting.Conventions.TypeScanner.Types">
            <summary>
            Gets or sets the types that have been found.
            </summary>
            <value>A <see cref="T:System.Collections.Generic.List`1"/> instance, containing the loaded types.</value>
        </member>
        <member name="T:MefContrib.Hosting.Filter.ContainsMetadata">
            <summary>
            Represent a filter which inspects metadata.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Filter.IFilter">
            <summary>
            A base interface for a filter used with <see cref="T:MefContrib.Hosting.Filter.FilteringCatalog"/> class.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Filter.IFilter.Filter(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)">
            <summary>
            Decides whether given part satisfies a filter.
            </summary>
            <param name="part"><see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> being filtered.</param>
            <returns>True if a given <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> satisfies the filter.
            False otherwise.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Filter.ContainsMetadata.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Filter.ContainsMetadata"/> class.
            </summary>
            <param name="metadata">Metadata key.</param>
            <param name="value">Metadata value.</param>
        </member>
        <member name="M:MefContrib.Hosting.Filter.ContainsMetadata.Filter(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)">
            <summary>
            Decides whether given part satisfies a filter.
            </summary>
            <param name="part"><see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> being filtered.</param>
            <returns>True if a given <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> satisfies the filter.
            False otherwise.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Filter.HasCreationPolicy">
            <summary>
            Represents a filter which filters out composable parts based on a
            specified <see cref="T:System.ComponentModel.Composition.CreationPolicy"/>.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Filter.HasCreationPolicy.#ctor(System.ComponentModel.Composition.CreationPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Filter.HasCreationPolicy"/> class.
            </summary>
            <param name="creationPolicy">Creation policy.</param>
        </member>
        <member name="M:MefContrib.Hosting.Filter.HasCreationPolicy.Filter(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)">
            <summary>
            Decides whether given part satisfies a filter.
            </summary>
            <param name="part"><see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> being filtered.</param>
            <returns>True if a given <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> satisfies the filter.
            False otherwise.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Filter.FilteringCatalog">
            <summary>
            Represents a catalog which wraps any <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> and
            filters out <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/>s based on a given criteria.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Filter.FilteringCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Filter.FilteringCatalog"/> class.
            </summary>
            <param name="inner">A <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> whose parts
            are to be filtered based on a given criteria.</param>
            <param name="filter">A filter query.</param>
        </member>
        <member name="M:MefContrib.Hosting.Filter.FilteringCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,MefContrib.Hosting.Filter.IFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Filter.FilteringCatalog"/> class.
            </summary>
            <param name="inner">A <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> whose parts
            are to be filtered based on a given criteria.</param>
            <param name="filter">An instance of the <see cref="T:MefContrib.Hosting.Filter.IFilter"/> interface
            to be used as a filter query.</param>
        </member>
        <member name="M:MefContrib.Hosting.Filter.FilteringCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
            <summary>
            Method which can filter exports for given <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> or produce new exports.
            </summary>
            <param name="definition"><see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> instance.</param>
            <returns>
            A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition"/>
            instances along with their <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances which match given <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/>.
            </returns>
        </member>
        <member name="P:MefContrib.Hosting.Filter.FilteringCatalog.Parts">
            <summary>
            Gets the part definitions of the catalog.
            </summary>
            <value>A <see cref="T:System.Linq.IQueryable`1"/> of <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> objects of the <see cref="T:MefContrib.Hosting.Filter.FilteringCatalog"/>.</value>
        </member>
        <member name="T:MefContrib.Hosting.Interception.Configuration.IInterceptionConfiguration">
            <summary>
            Defines the functionality of the interception configuration.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Interception.Configuration.IInterceptionConfiguration.Interceptors">
            <summary>
            Gets a collection of the catalog wide interceptors.
            </summary>
            <remarks>
            All parts inside <see cref="T:MefContrib.Hosting.Interception.InterceptingCatalog"/> will be intercepted
            using this interceptors in order in which they were added.
            </remarks>
        </member>
        <member name="P:MefContrib.Hosting.Interception.Configuration.IInterceptionConfiguration.InterceptionCriteria">
            <summary>
            Gets a collection of <see cref="T:MefContrib.Hosting.Interception.Configuration.IPartInterceptionCriteria"/> instances.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Interception.Configuration.IInterceptionConfiguration.ExportHandlers">
            <summary>
            Gets a collection of <see cref="T:MefContrib.Hosting.Interception.IExportHandler"/> instances.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Interception.Configuration.IInterceptionConfiguration.PartHandlers">
            <summary>
            Gets a collection of <see cref="T:MefContrib.Hosting.Interception.IPartHandler"/> instances.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Interception.Configuration.InterceptionConfiguration">
            <summary>
            Defines the interception configuration.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Interception.Configuration.InterceptionConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Interception.InterceptingCatalog"/> class.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Interception.Configuration.InterceptionConfiguration.AddInterceptor(MefContrib.Hosting.Interception.IExportedValueInterceptor)">
            <summary>
            Adds a catalog wide interceptor. If adding more than one catalog wide interceptor,
            it is wrapped in <see cref="T:MefContrib.Hosting.Interception.CompositeValueInterceptor"/> instance.
            </summary>
            <param name="interceptor">Interceptor to be added.</param>
            <returns><see cref="T:MefContrib.Hosting.Interception.Configuration.InterceptionConfiguration"/> instance to enable fluent configuration.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Interception.Configuration.InterceptionConfiguration.AddHandler(MefContrib.Hosting.Interception.IExportHandler)">
            <summary>
            Adds an <see cref="T:MefContrib.Hosting.Interception.IExportHandler"/> instance.
            </summary>
            <param name="handler">Export handler to be added.</param>
            <returns><see cref="T:MefContrib.Hosting.Interception.Configuration.InterceptionConfiguration"/> instance to enable fluent configuration.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Interception.Configuration.InterceptionConfiguration.AddHandler(MefContrib.Hosting.Interception.IPartHandler)">
            <summary>
            Adds an <see cref="T:MefContrib.Hosting.Interception.IPartHandler"/> instance.
            </summary>
            <param name="handler">Part handler to be added.</param>
            <returns><see cref="T:MefContrib.Hosting.Interception.Configuration.InterceptionConfiguration"/> instance to enable fluent configuration.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Interception.Configuration.InterceptionConfiguration.AddInterceptionCriteria(MefContrib.Hosting.Interception.Configuration.IPartInterceptionCriteria)">
            <summary>
            Adds <see cref="T:MefContrib.Hosting.Interception.Configuration.IPartInterceptionCriteria"/> instance.
            </summary>
            <param name="partInterceptionCriteria">Criteria to be added.</param>
            <returns><see cref="T:MefContrib.Hosting.Interception.Configuration.InterceptionConfiguration"/> instance to enable fluent configuration.</returns>
        </member>
        <member name="P:MefContrib.Hosting.Interception.Configuration.InterceptionConfiguration.Interceptors">
            <summary>
            Gets a collection of the catalog wide interceptors.
            </summary>
            <remarks>
            All parts inside <see cref="T:MefContrib.Hosting.Interception.InterceptingCatalog"/> will be intercepted
            using this interceptors in order in which they were added.
            </remarks>
        </member>
        <member name="P:MefContrib.Hosting.Interception.Configuration.InterceptionConfiguration.InterceptionCriteria">
            <summary>
            Gets a collection of <see cref="T:MefContrib.Hosting.Interception.Configuration.IPartInterceptionCriteria"/> instances.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Interception.Configuration.InterceptionConfiguration.ExportHandlers">
            <summary>
            Gets a collection of <see cref="T:MefContrib.Hosting.Interception.IExportHandler"/> instances.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Interception.Configuration.InterceptionConfiguration.PartHandlers">
            <summary>
            Gets a collection of <see cref="T:MefContrib.Hosting.Interception.IPartHandler"/> instances.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Interception.Configuration.IPartInterceptionCriteria">
            <summary>
            Defines the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> interception criteria.
            All <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances which satisfy given
            <see cref="P:MefContrib.Hosting.Interception.Configuration.IPartInterceptionCriteria.Predicate"/> whill have their value intercepted <see cref="P:MefContrib.Hosting.Interception.Configuration.IPartInterceptionCriteria.Interceptor"/> instance.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Interception.Configuration.IPartInterceptionCriteria.Interceptor">
            <summary>
            Gets the <see cref="T:MefContrib.Hosting.Interception.IExportedValueInterceptor"/> instance.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Interception.Configuration.IPartInterceptionCriteria.Predicate">
            <summary>
            Gets the predicate.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Interception.Configuration.PredicateInterceptionCriteria">
            <summary>
            Defines predicate-based interception criteria.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Interception.Configuration.PredicateInterceptionCriteria.#ctor(MefContrib.Hosting.Interception.IExportedValueInterceptor,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Interception.Configuration.PredicateInterceptionCriteria"/> class.
            </summary>
            <param name="interceptor">The <see cref="T:MefContrib.Hosting.Interception.IExportedValueInterceptor"/> instance.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="P:MefContrib.Hosting.Interception.Configuration.PredicateInterceptionCriteria.Interceptor">
            <summary>
            Gets the <see cref="T:MefContrib.Hosting.Interception.IExportedValueInterceptor"/> instance.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Interception.Configuration.PredicateInterceptionCriteria.Predicate">
            <summary>
            Gets the predicate.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Interception.DisposableInterceptingComposablePart">
            <summary>
            Defines <see cref="T:MefContrib.Hosting.Interception.InterceptingComposablePart"/> which is disposable.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Interception.InterceptingComposablePart">
            <summary>
            Defines a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart"/> which supports interception.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Interception.InterceptingComposablePart.#ctor(System.ComponentModel.Composition.Primitives.ComposablePart,MefContrib.Hosting.Interception.IExportedValueInterceptor)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Interception.InterceptingComposablePart"/> class.
            </summary>
            <param name="interceptedPart">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart"/> being intercepted.</param>
            <param name="valueInterceptor">The <see cref="T:MefContrib.Hosting.Interception.IExportedValueInterceptor"/> instance.</param>
        </member>
        <member name="M:MefContrib.Hosting.Interception.InterceptingComposablePart.GetExportedValue(System.ComponentModel.Composition.Primitives.ExportDefinition)">
            <summary>
            Gets the exported object described by the specified <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition"/> object.
            </summary>
            <returns>
            The exported object described by <paramref name="definition"/>.
            </returns>
            <param name="definition">One of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition"/> objects from the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ExportDefinitions"/> property that describes the exported object to return.</param>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart"/> object has been disposed of.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="definition"/> is null.</exception>
            <exception cref="T:System.ComponentModel.Composition.Primitives.ComposablePartException">An error occurred getting the exported object described by the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="definition"/> did not originate from the <see cref="P:System.ComponentModel.Composition.Primitives.ComposablePart.ExportDefinitions"/> property on the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart"/>.</exception>
            <exception cref="T:System.InvalidOperationException">One or more prerequisite imports, indicated by <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.IsPrerequisite"/>, have not been set.</exception>
        </member>
        <member name="P:MefContrib.Hosting.Interception.InterceptingComposablePart.InterceptedPart">
            <summary>
            Gets the intercepted <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart"/> instance.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Interception.DisposableInterceptingComposablePart.#ctor(System.ComponentModel.Composition.Primitives.ComposablePart,MefContrib.Hosting.Interception.IExportedValueInterceptor)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Interception.DisposableInterceptingComposablePart"/> class.
            </summary>
            <param name="interceptedPart">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart"/> being intercepted.</param>
            <param name="valueInterceptor">The <see cref="T:MefContrib.Hosting.Interception.IExportedValueInterceptor"/> instance.</param>
        </member>
        <member name="T:MefContrib.Hosting.Interception.IExportHandler">
            <summary>
            Defines an export handler which can be used to filter parts or create exports on the fly.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Interception.IExportHandler.Initialize(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)">
            <summary>
            Initializes this export handler.
            </summary>
            <param name="interceptedCatalog">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> being intercepted.</param>
        </member>
        <member name="M:MefContrib.Hosting.Interception.IExportHandler.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.Collections.Generic.IEnumerable{System.Tuple{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition}})">
            <summary>
            Method which can filter exports for given <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> or produce new exports.
            </summary>
            <param name="definition"><see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> instance.</param>
            <param name="exports">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition"/>
            instances along with their <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances which match given <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/>.</param>
            <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition"/>
            instances along with their <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances which match given <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/>.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Generics.GenericContractRegistryBase">
            <summary>
            Defines a base class for <see cref="T:MefContrib.Hosting.Generics.IGenericContractRegistry"/> implementations.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Generics.IGenericContractRegistry">
            <summary>
            Defines a generics contract type mapping registry.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Generics.IGenericContractRegistry.GetMappings">
            <summary>
            Retrieves open generics type mappings.
            </summary>
            <returns>An instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing <see cref="T:MefContrib.Hosting.Generics.GenericContractTypeMapping"/> instances.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Generics.GenericContractRegistryBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Generics.GenericContractRegistryBase"/> class.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Generics.GenericContractRegistryBase.Register(System.Type,System.Type)">
            <summary>
            Maps open generics type to its open generics implementation.
            </summary>
            <param name="genericContractTypeDefinition">Open generics contract type.</param>
            <param name="genericImplementationTypeDefinition">Open generics implementation type.</param>
        </member>
        <member name="M:MefContrib.Hosting.Generics.GenericContractRegistryBase.Initialize">
            <summary>
            Method which is responsible for initializing this registry.
            </summary>
            <remarks>
            Use this method to register type mappings using the <see cref="M:MefContrib.Hosting.Generics.GenericContractRegistryBase.Register(System.Type,System.Type)"/> method.
            </remarks>
        </member>
        <member name="M:MefContrib.Hosting.Generics.GenericContractRegistryBase.GetMappings">
            <summary>
            Retrieves open generics type mappings.
            </summary>
            <returns>An instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing <see cref="T:MefContrib.Hosting.Generics.GenericContractTypeMapping"/> instances.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Generics.GenericContractTypeMapping">
            <summary>
            Defines open generics type mapping.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Generics.GenericContractTypeMapping.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Generics.GenericContractTypeMapping"/> class.
            </summary>
            <param name="genericContractTypeDefinition">Open generics contract type.</param>
            <param name="genericImplementationTypeDefinition">Open generics implementation type.</param>
        </member>
        <member name="P:MefContrib.Hosting.Generics.GenericContractTypeMapping.GenericContractTypeDefinition">
            <summary>
            Gets the open generics contract type.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.Generics.GenericContractTypeMapping.GenericImplementationTypeDefinition">
            <summary>
            Gets the open generics implementation type.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Generics.GenericExportHandler">
            <summary>
            Defines an export handler which enables open generics support.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Generics.GenericExportHandler.#ctor(MefContrib.Hosting.Generics.IGenericContractRegistry[])">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Generics.GenericExportHandler"/> class.
            </summary>
            <param name="registries">A collection of <see cref="T:MefContrib.Hosting.Generics.IGenericContractRegistry"/> instances.</param>
        </member>
        <member name="M:MefContrib.Hosting.Generics.GenericExportHandler.Initialize(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)">
            <summary>
            Initializes this export handler.
            </summary>
            <param name="interceptedCatalog">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> being intercepted.</param>
        </member>
        <member name="M:MefContrib.Hosting.Generics.GenericExportHandler.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.Collections.Generic.IEnumerable{System.Tuple{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition}})">
            <summary>
            Method which can filter exports for given <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> or produce new exports.
            </summary>
            <param name="definition"><see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> instance.</param>
            <param name="exports">A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition"/>
            instances along with their <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances which match given <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/>.</param>
            <returns>A collection of <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition"/>
            instances along with their <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances which match given <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/>.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Generics.TypeHelper">
            <summary>
            Contains utility methods for open-generics support mechanism.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Generics.TypeHelper.IsCollection(System.Type)">
            <summary>
            Checks if the given type is a collection.
            </summary>
            <param name="type">The type to check.</param>
            <returns><c>True</c> if the given type is a collection. False otherwise.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Generics.TypeHelper.IsGenericCollection(System.Type)">
            <summary>
            Checks if the given type is a generic collection.
            </summary>
            <param name="type">The type to check.</param>
            <returns><c>True</c> if the given type is a generic collection. False otherwise.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Generics.TypeHelper.GetGenericCollectionParameter(System.Type)">
            <summary>
            Gets the type of object the collection can hold.
            </summary>
            <param name="type"><see cref="T:System.Type"/> of the collection.</param>
            <returns><see cref="T:System.Type"/> of object the collection can hold.</returns>
        </member>
        <member name="M:MefContrib.Hosting.Generics.TypeHelper.TryGetAncestor(System.Type,System.Type)">
            <summary>
            Tries to get ancestor of a given type.
            </summary>
            <param name="type">Source type.</param>
            <param name="ancestor">Ancestor's type.</param>
            <returns>The ancestor type if found. <c>Null</c> otherwise.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Interception.IExportedValueInterceptor">
            <summary>
            Represents an interceptor which can intercept exported values.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Interception.IExportedValueInterceptor.Intercept(System.Object)">
            <summary>
            Intercepts an exported value.
            </summary>
            <param name="value">The value to be intercepted.</param>
            <returns>Intercepted value.</returns>
        </member>
        <member name="T:MefContrib.Hosting.Interception.InterceptingCatalog">
            <summary>
            Defines a catalog which enables interception on its parts.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Interception.InterceptingCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,MefContrib.Hosting.Interception.Configuration.IInterceptionConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Interception.InterceptingCatalog"/> class.
            </summary>
            <param name="interceptedCatalog">Catalog to be intercepted.</param>
            <param name="configuration">Interception configuration.</param>
        </member>
        <member name="M:MefContrib.Hosting.Interception.InterceptingCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)">
            <summary>
            Gets a list of export definitions that match the constraint defined
            by the specified <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition"/> object.
            </summary>
            <returns>
            A collection of <see cref="T:System.Tuple`2"/> containing the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition"/>
            objects and their associated <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> objects for objects that match the constraint specified by <paramref name="definition"/>.
            </returns>
            <param name="definition">The conditions of the <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition"/>
            objects to be returned.</param>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> object has been disposed of.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="definition"/> is null.</exception>
        </member>
        <member name="M:MefContrib.Hosting.Interception.InterceptingCatalog.OnChanging(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition},System.ComponentModel.Composition.Hosting.AtomicComposition)">
            <summary>
            Fires the <see cref="E:MefContrib.Hosting.Interception.InterceptingCatalog.Changing"/> event.
            </summary>
            <param name="addedDefinitions">The collection of added <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances.</param>
            <param name="removedDefinitions">The collection of removed <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances.</param>
            <param name="composition"><see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition"/> instance.</param>
        </member>
        <member name="M:MefContrib.Hosting.Interception.InterceptingCatalog.OnChanged(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition},System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition},System.ComponentModel.Composition.Hosting.AtomicComposition)">
            <summary>
            Fires the <see cref="E:MefContrib.Hosting.Interception.InterceptingCatalog.Changed"/> event.
            </summary>
            <param name="addedDefinitions">The collection of added <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances.</param>
            <param name="removedDefinitions">The collection of removed <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> instances.</param>
            <param name="composition"><see cref="T:System.ComponentModel.Composition.Hosting.AtomicComposition"/> instance.</param>
        </member>
        <member name="M:MefContrib.Hosting.Interception.InterceptingCatalog.GetCompositeInterceptor(System.Collections.Generic.IEnumerable{MefContrib.Hosting.Interception.IExportedValueInterceptor})">
            <summary>
            Method called in order to aggregate two or more <see cref="T:MefContrib.Hosting.Interception.IExportedValueInterceptor"/> instances
            into a single interceptor. By default, the <see cref="T:MefContrib.Hosting.Interception.CompositeValueInterceptor"/> instance is created.
            </summary>
            <param name="interceptors">Interceptors to be aggregated.</param>
            <returns>New instance of the <see cref="T:MefContrib.Hosting.Interception.IExportedValueInterceptor"/>.</returns>
        </member>
        <member name="P:MefContrib.Hosting.Interception.InterceptingCatalog.Parts">
            <summary>
            Gets the part definitions that are contained in the catalog.
            </summary>
            <returns>
            The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> contained in the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> object has been disposed of.</exception>
        </member>
        <member name="E:MefContrib.Hosting.Interception.InterceptingCatalog.Changed">
            <summary>
            Occurs when a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> has changed.
            </summary>
        </member>
        <member name="E:MefContrib.Hosting.Interception.InterceptingCatalog.Changing">
            <summary>
            Occurs when a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> is changing.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Interception.InterceptingComposablePartDefinition">
            <summary>
            Defines a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> which supports interception.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Interception.InterceptingComposablePartDefinition.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,MefContrib.Hosting.Interception.IExportedValueInterceptor)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Interception.InterceptingComposablePartDefinition"/> class.
            </summary>
            <param name="interceptedPartDefinition">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> being intercepted.</param>
            <param name="valueInterceptor">The <see cref="T:MefContrib.Hosting.Interception.IExportedValueInterceptor"/> instance.</param>
        </member>
        <member name="P:MefContrib.Hosting.Interception.InterceptingComposablePartDefinition.InterceptedPartDefinition">
            <summary>
            Gets the intercepted <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/>.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.Interception.CompositeValueInterceptor">
            <summary>
            Represents an interceptor which aggregates other <see cref="T:MefContrib.Hosting.Interception.IExportedValueInterceptor"/> instances.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.Interception.CompositeValueInterceptor.#ctor(MefContrib.Hosting.Interception.IExportedValueInterceptor[])">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.Interception.CompositeValueInterceptor"/> class.
            </summary>
            <param name="interceptors">An array of <see cref="T:MefContrib.Hosting.Interception.IExportedValueInterceptor"/> to be aggregated.</param>
        </member>
        <member name="M:MefContrib.Hosting.Interception.CompositeValueInterceptor.Intercept(System.Object)">
            <summary>
            Intercepts an exported value.
            </summary>
            <param name="value">The value to be intercepted.</param>
            <returns>Intercepted value.</returns>
        </member>
        <member name="P:MefContrib.Hosting.Interception.CompositeValueInterceptor.Interceptors">
            <summary>
            Gets a collection of <see cref="T:MefContrib.Hosting.Interception.IExportedValueInterceptor"/> instances.
            </summary>
        </member>
        <member name="T:MefContrib.Containers.ContainerAdapterBase">
            <summary>
            Represents an abstract base class which all <see cref="T:MefContrib.Containers.IContainerAdapter"/>
            implementators can inherit from.
            </summary>
        </member>
        <member name="T:MefContrib.Containers.IContainerAdapter">
            <summary>
            Represents an abstraction over a dependency injection container.
            </summary>
        </member>
        <member name="M:MefContrib.Containers.IContainerAdapter.Resolve(System.Type,System.String)">
            <summary>
            Method called by <see cref="T:MefContrib.Containers.ContainerExportProvider"/> to retrieve
            an instance of a given type.
            </summary>
            <param name="type">Type of the instance to retrieve.</param>
            <param name="name">Optional name.</param>
            <returns>An instance of a given type.</returns>
        </member>
        <member name="M:MefContrib.Containers.IContainerAdapter.Initialize">
            <summary>
            Method called by <see cref="T:MefContrib.Containers.ContainerExportProvider"/> in order
            to initialize the adapter.
            </summary>
        </member>
        <member name="E:MefContrib.Containers.IContainerAdapter.RegisteringComponent">
            <summary>
            Event raised whenever a component gets registered in
            the underlying container.
            </summary>
        </member>
        <member name="M:MefContrib.Containers.ContainerAdapterBase.Resolve(System.Type,System.String)">
            <summary>
            Method called by <see cref="T:MefContrib.Containers.ContainerExportProvider"/> to retrieve
            an instance of a given type.
            </summary>
            <param name="type">Type of the instance to retrieve.</param>
            <param name="name">Optional name.</param>
            <returns>An instance of a given type.</returns>
        </member>
        <member name="M:MefContrib.Containers.ContainerAdapterBase.Initialize">
            <summary>
            Method called by <see cref="T:MefContrib.Containers.ContainerExportProvider"/> in order
            to initialize the adapter.
            </summary>
        </member>
        <member name="M:MefContrib.Containers.ContainerAdapterBase.OnRegisteringComponent(System.Type,System.String)">
            <summary>
            Fires <see cref="E:MefContrib.Containers.ContainerAdapterBase.RegisteringComponent"/> event.
            </summary>
            <param name="type">Type being registered.</param>
            <param name="name">Optional name.</param>
        </member>
        <member name="E:MefContrib.Containers.ContainerAdapterBase.RegisteringComponent">
            <summary>
            Event raised whenever a component gets registered in
            the underlying container.
            </summary>
        </member>
        <member name="T:MefContrib.Containers.ContainerServices">
            <summary>
            Provides common services.
            </summary>
        </member>
        <member name="M:MefContrib.Containers.ContainerServices.Resolve(System.ComponentModel.Composition.Hosting.ExportProvider,System.Type,System.String)">
            <summary>
            Resolves an object wrapped inside <see cref="T:System.Lazy`1"/> from an <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider"/>.
            </summary>
            <param name="exportProvider">Export provider.</param>
            <param name="type">Type to be resolved.</param>
            <param name="name">Optional name.</param>
            <returns>Resolved instance or null, if no instance has been found.</returns>
            <remarks>
            Does not resolve instances which are provided by means of
            <see cref="T:MefContrib.Hosting.FactoryExportProvider"/>.
            </remarks>
        </member>
        <member name="M:MefContrib.Containers.ContainerServices.ResolveAll(System.ComponentModel.Composition.Hosting.ExportProvider,System.Type,System.String)">
            <summary>
            Resolves an collection of objects wrapped inside <see cref="T:System.Lazy`1"/>
            from an <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider"/>.
            </summary>
            <param name="exportProvider">Export provider.</param>
            <param name="type">Type to be resolved.</param>
            <param name="name">Optional name.</param>
            <returns>Resolved collection of lazy instances or null, if no instance has been found.</returns>
            <remarks>
            Does not resolve instances which are provided by means of
            <see cref="T:MefContrib.Hosting.FactoryExportProvider"/>.
            </remarks>
        </member>
        <member name="T:MefContrib.Containers.ContainerExportProvider">
            <summary>
            Represents an <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider"/> which can provide
            MEF with parts registered in any container.
            </summary>
        </member>
        <member name="M:MefContrib.Containers.ContainerExportProvider.#ctor(MefContrib.Containers.IContainerAdapter)">
            <summary>
            Initializes a new instance of <see cref="T:MefContrib.Containers.ContainerExportProvider"/> class.
            </summary>
            <param name="containerAdapter">An instance of the <see cref="T:MefContrib.Containers.IContainerAdapter"/> interface.</param>
        </member>
        <member name="P:MefContrib.Containers.ContainerExportProvider.FactoryExportProvider">
            <summary>
            Gets the underlying <see cref="P:MefContrib.Containers.ContainerExportProvider.FactoryExportProvider"/> instance.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.FactoryExportProvider">
            <summary>
            Represents a factory export provider.
            </summary>
            <remarks>
            This class can be used to build custom <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider"/> which
            provides exports from various data sources.
            </remarks>
        </member>
        <member name="M:MefContrib.Hosting.FactoryExportProvider.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:MefContrib.Hosting.FactoryExportProvider"/> class.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.FactoryExportProvider.#ctor(System.Type,System.Func{System.ComponentModel.Composition.Hosting.ExportProvider,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Hosting.FactoryExportProvider"/> class.
            </summary>
            <param name="type"><see cref="T:System.Type"/> to be registered.</param>
            <param name="factory">Factory method.</param>
        </member>
        <member name="M:MefContrib.Hosting.FactoryExportProvider.#ctor(System.Type,System.String,System.Func{System.ComponentModel.Composition.Hosting.ExportProvider,System.Object})">
            <summary>
            Initializes a new instance of <see cref="T:MefContrib.Hosting.FactoryExportProvider"/> class.
            </summary>
            <param name="type"><see cref="T:System.Type"/> to be registered.</param>
            <param name="registrationName">Registration name.</param>
            <param name="factory">Factory method.</param>
        </member>
        <member name="M:MefContrib.Hosting.FactoryExportProvider.#ctor(System.Func{System.Type,System.String,System.Object})">
            <summary>
            Initializes a new instance of <see cref="T:MefContrib.Hosting.FactoryExportProvider"/> class.
            </summary>
            <param name="factoryMethod">Method that is called when an instance of specific type
            is requested, optionally with given registration name.</param>
        </member>
        <member name="M:MefContrib.Hosting.FactoryExportProvider.Register(System.Type,System.Func{System.ComponentModel.Composition.Hosting.ExportProvider,System.Object})">
            <summary>
            Registers a new type.
            </summary>
            <param name="type">Type that is being exported.</param>
            <param name="factory">Optional factory method. If not supplied, the general
            factory method will be used.</param>
            <returns><see cref="T:MefContrib.Hosting.FactoryExportProvider"/> instance for fluent registration.</returns>
        </member>
        <member name="M:MefContrib.Hosting.FactoryExportProvider.Register``1(System.Func{System.ComponentModel.Composition.Hosting.ExportProvider,``0})">
            <summary>
            Registers a new type.
            </summary>
            <typeparam name="T">Type that is being exported.</typeparam>
            <param name="factory">Optional factory method. If not supplied, the general
            factory method will be used.</param>
            <returns><see cref="T:MefContrib.Hosting.FactoryExportProvider"/> instance for fluent registration.</returns>
        </member>
        <member name="M:MefContrib.Hosting.FactoryExportProvider.RegisterInstance(System.Type,System.Func{System.ComponentModel.Composition.Hosting.ExportProvider,System.Object})">
            <summary>
            Registers a new type as a singleton.
            </summary>
            <param name="type">Type that is being exported.</param>
            <param name="factory">Factory method.</param>
            <returns><see cref="T:MefContrib.Hosting.FactoryExportProvider"/> instance for fluent registration.</returns>
        </member>
        <member name="M:MefContrib.Hosting.FactoryExportProvider.RegisterInstance``1(System.Func{System.ComponentModel.Composition.Hosting.ExportProvider,``0})">
            <summary>
            Registers a new type as a singleton.
            </summary>
            <typeparam name="T">Type that is being exported.</typeparam>
            <param name="factory">Optional factory method. If not supplied, the general
            factory method will be used.</param>
            <returns><see cref="T:MefContrib.Hosting.FactoryExportProvider"/> instance for fluent registration.</returns>
        </member>
        <member name="M:MefContrib.Hosting.FactoryExportProvider.RegisterInstance(System.Type,System.String,System.Func{System.ComponentModel.Composition.Hosting.ExportProvider,System.Object})">
            <summary>
            Registers a new type as a singleton.
            </summary>
            <param name="type">Type that is being registered.</param>
            <param name="registrationName">Registration name under which <paramref name="type"/>
            is being registered.</param>
            <param name="factory">Optional factory method. If not supplied, the general
            factory method will be used.</param>
            <returns><see cref="T:MefContrib.Hosting.FactoryExportProvider"/> instance for fluent registration.</returns>
        </member>
        <member name="M:MefContrib.Hosting.FactoryExportProvider.RegisterInstance``1(System.String,System.Func{System.ComponentModel.Composition.Hosting.ExportProvider,``0})">
            <summary>
            Registers a new type as a singleton.
            </summary>
            <typeparam name="T">Type that is being exported.</typeparam>
            <param name="registrationName">Registration name under which <typeparamref name="T"/>
            is being registered.</param>
            <param name="factory">Optional factory method. If not supplied, the general
            factory method will be used.</param>
            <returns><see cref="T:MefContrib.Hosting.FactoryExportProvider"/> instance for fluent registration.</returns>
        </member>
        <member name="M:MefContrib.Hosting.FactoryExportProvider.Register``1(System.String,System.Func{System.ComponentModel.Composition.Hosting.ExportProvider,``0})">
            <summary>
            Registers a new type.
            </summary>
            <typeparam name="T">Type that is being exported.</typeparam>
            <param name="registrationName">Registration name under which <typeparamref name="T"/>
            is being registered.</param>
            <param name="factory">Optional factory method. If not supplied, the general
            factory method will be used.</param>
            <returns><see cref="T:MefContrib.Hosting.FactoryExportProvider"/> instance for fluent registration.</returns>
        </member>
        <member name="M:MefContrib.Hosting.FactoryExportProvider.Register(System.Type,System.String,System.Func{System.ComponentModel.Composition.Hosting.ExportProvider,System.Object})">
            <summary>
            Registers a new type.
            </summary>
            <param name="type">Type that is being registered.</param>
            <param name="registrationName">Registration name under which <paramref name="type"/>
            is being registered.</param>
            <param name="factory">Optional factory method. If not supplied, the general
            factory method will be used.</param>
            <returns><see cref="T:MefContrib.Hosting.FactoryExportProvider"/> instance for fluent registration.</returns>
        </member>
        <member name="P:MefContrib.Hosting.FactoryExportProvider.ReadOnlyDefinitions">
            <summary>
            Gets a read only list of definitions known to the export provider.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.FactoryExportProvider.SourceProvider">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider"/> which is used to satisfy additional exports.
            </summary>
        </member>
        <member name="T:MefContrib.Hosting.FactoryExportDefinition">
            <summary>
            Represents a factory export definition that has a type and
            an optional registration name.
            </summary>
        </member>
        <member name="F:MefContrib.Hosting.FactoryExportDefinition.IsFactoryExportMetadataName">
            <summary>
            Represents a metadata which identifies a factory export.
            </summary>
        </member>
        <member name="M:MefContrib.Hosting.FactoryExportDefinition.#ctor(System.Type,System.String,System.Func{System.ComponentModel.Composition.Hosting.ExportProvider,System.Object})">
            <summary>
            Initializes a new instance of <see cref="T:MefContrib.Hosting.FactoryExportDefinition"/> class.
            </summary>
            <param name="type">Type this export defines.</param>
            <param name="registrationName">Registration name under which <paramref name="type"/>
            has been registered.</param>
            <param name="factory">Export factory.</param>
        </member>
        <member name="P:MefContrib.Hosting.FactoryExportDefinition.ContractType">
            <summary>
            Gets a type this export defines.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.FactoryExportDefinition.RegistrationName">
            <summary>
            Gets a registration name under which <see cref="P:MefContrib.Hosting.FactoryExportDefinition.ContractType"/> has been registered.
            </summary>
        </member>
        <member name="P:MefContrib.Hosting.FactoryExportDefinition.Factory">
            <summary>
            Gets the factory used to create instances of export described by this <see cref="T:System.ComponentModel.Composition.Primitives.ExportDefinition"/>.
            </summary>
        </member>
        <member name="T:MefContrib.Containers.PartNotComposableAttribute">
            <summary>
            Suppresses MEF composition for a class created by the IoC container.
            </summary>
        </member>
        <member name="T:MefContrib.Containers.RegisterComponentEventArgs">
            <summary>
            Represents arguments for <see cref="E:MefContrib.Containers.IContainerAdapter.RegisteringComponent"/> event.
            </summary>
        </member>
        <member name="M:MefContrib.Containers.RegisterComponentEventArgs.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MefContrib.Containers.RegisterComponentEventArgs"/> class.
            </summary>
            <param name="type"><see cref="P:MefContrib.Containers.RegisterComponentEventArgs.Type"/> being registered.</param>
            <param name="name">Optional name.</param>
        </member>
        <member name="P:MefContrib.Containers.RegisterComponentEventArgs.Type">
            <summary>
            Gets the <see cref="P:MefContrib.Containers.RegisterComponentEventArgs.Type"/> being registered.
            </summary>
        </member>
        <member name="P:MefContrib.Containers.RegisterComponentEventArgs.Name">
            <summary>
            Gets the optional name used during component registration.
            </summary>
        </member>
        <member name="T:MefContrib.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MefContrib.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MefContrib.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MefContrib.Properties.Resources.TooManyInstances">
            <summary>
              Looks up a localized string similar to Requested type has more than one instance..
            </summary>
        </member>
    </members>
</doc>
